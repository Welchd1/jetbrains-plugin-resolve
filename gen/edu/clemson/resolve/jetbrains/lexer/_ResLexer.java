/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package edu.clemson.resolve.jetbrains.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import edu.clemson.resolve.jetbrains.ResTypes;
import java.util.*;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static edu.clemson.resolve.jetbrains.RESOLVEParserDefinition.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>ResLexer.flex</tt>
 */
class _ResLexer implements FlexLexer, ResTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15200 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15"+
    "\1\17\1\15\1\20\1\21\12\15\1\22\10\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1"+
    "\33\1\34\1\23\1\35\1\36\2\23\1\15\1\37\3\23\1\40\10\23\1\41\1\42\20\23\1\43"+
    "\2\23\1\44\5\23\1\45\4\23\1\46\1\47\4\23\51\15\1\50\3\15\1\51\1\52\4\15\1"+
    "\53\12\23\1\54\u0381\23");

  /* The ZZ_CMAP_Y table has 2880 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\22\1\23\1\24\3\22\1\25\10\13\1\26\12\13"+
    "\1\27\1\13\1\30\1\27\1\13\1\31\4\1\1\13\1\32\1\33\2\1\2\13\1\32\1\1\1\34\1"+
    "\27\5\13\1\35\1\36\1\37\1\1\1\40\1\13\1\1\1\41\5\13\1\42\1\43\1\44\1\13\1"+
    "\32\1\45\1\13\1\46\1\47\1\1\1\13\1\50\4\1\1\13\1\51\4\1\1\52\2\13\1\53\1\1"+
    "\1\54\1\55\1\27\1\56\1\57\1\60\1\61\1\62\1\63\1\55\1\64\1\65\1\57\1\60\1\66"+
    "\1\1\1\67\1\70\1\71\1\72\1\73\1\60\1\74\1\1\1\75\1\55\1\76\1\77\1\57\1\60"+
    "\1\74\1\1\1\63\1\55\1\43\1\100\1\101\1\102\1\103\1\1\1\75\1\70\1\1\1\104\1"+
    "\40\1\60\1\53\1\1\1\105\1\55\1\1\1\104\1\40\1\60\1\106\1\1\1\62\1\55\1\107"+
    "\1\104\1\40\1\13\1\110\1\62\1\111\1\55\1\112\1\113\1\114\1\13\1\115\1\116"+
    "\1\1\1\70\1\1\1\27\2\13\1\117\1\116\1\120\2\1\1\121\1\122\1\123\1\124\1\125"+
    "\1\126\2\1\1\75\1\1\1\120\1\1\1\127\1\13\1\130\1\1\1\131\7\1\2\13\1\32\1\111"+
    "\1\120\1\132\1\133\1\134\1\135\1\120\2\13\1\136\2\13\1\137\24\13\1\140\1\141"+
    "\2\13\1\140\2\13\1\142\1\143\1\144\3\13\1\143\3\13\1\32\2\1\1\13\1\1\5\13"+
    "\1\145\1\27\45\13\1\146\1\13\1\27\1\32\4\13\1\32\1\147\1\150\1\64\1\13\1\64"+
    "\1\13\1\64\1\150\1\75\3\13\1\151\1\1\1\152\1\120\2\1\1\120\5\13\1\31\2\13"+
    "\1\153\4\13\1\42\1\13\1\154\2\1\1\70\1\13\1\155\1\51\2\13\1\156\1\13\1\103"+
    "\1\120\2\1\1\13\1\116\3\13\1\51\2\1\2\120\1\157\5\1\1\113\2\13\1\151\1\160"+
    "\1\120\2\1\1\161\1\13\1\162\1\44\2\13\1\42\1\1\2\13\1\151\1\1\1\163\1\44\1"+
    "\13\1\155\6\1\1\164\1\165\14\13\4\1\21\13\1\145\2\13\1\145\1\166\1\13\1\155"+
    "\3\13\1\167\1\170\1\171\1\130\1\170\2\1\1\172\1\173\3\1\1\174\1\1\1\130\6"+
    "\1\1\175\1\176\1\177\1\200\1\201\3\1\1\202\1\203\1\204\1\205\1\206\1\207\2"+
    "\1\1\210\1\211\1\212\1\213\1\214\1\215\1\216\1\217\1\220\1\221\1\222\1\223"+
    "\1\224\3\1\1\225\10\1\1\226\1\227\40\1\1\230\41\1\1\231\1\232\1\233\40\1\1"+
    "\234\1\1\1\235\1\236\1\1\1\237\2\1\1\240\27\1\2\13\1\154\2\13\1\154\10\13"+
    "\1\241\1\242\2\13\1\136\3\13\1\243\1\1\1\13\1\116\4\244\4\1\1\111\35\1\1\245"+
    "\2\1\1\246\1\27\4\13\1\247\1\27\4\13\1\137\1\113\1\13\1\155\1\27\4\13\1\154"+
    "\1\1\1\13\1\32\3\1\1\13\40\1\133\13\1\42\4\1\135\13\1\42\2\1\10\13\1\130\4"+
    "\1\2\13\1\155\20\13\1\130\1\13\1\250\1\1\2\13\1\154\1\111\1\13\1\155\4\13"+
    "\1\42\2\1\1\251\1\252\5\13\1\253\1\13\1\155\1\31\3\1\1\251\1\254\1\13\1\33"+
    "\1\1\3\13\1\151\1\252\2\13\1\151\1\1\1\120\1\1\1\255\1\44\1\13\1\42\1\13\1"+
    "\116\1\1\1\13\1\130\1\52\2\13\1\33\1\111\1\120\1\256\1\257\2\13\1\50\1\1\1"+
    "\260\1\120\1\13\1\261\3\13\1\262\1\263\1\264\1\32\1\71\1\265\1\266\1\244\2"+
    "\13\1\137\1\42\7\13\1\33\1\120\72\13\1\151\1\13\1\267\2\13\1\156\120\1\26"+
    "\13\1\155\6\13\1\103\2\1\1\116\1\270\1\60\1\271\1\272\6\13\1\64\1\1\1\161"+
    "\25\13\1\155\1\1\4\13\1\252\2\13\1\31\2\1\1\156\7\1\1\256\7\13\1\130\1\1\1"+
    "\120\1\27\1\32\1\27\1\32\1\273\4\13\1\154\1\274\1\275\2\1\1\276\1\13\1\144"+
    "\1\277\2\155\2\1\7\13\1\32\30\1\1\13\1\130\3\13\1\75\2\1\2\13\1\1\1\13\1\300"+
    "\2\13\1\42\1\13\1\155\2\13\1\301\3\1\11\13\1\155\1\120\5\1\2\13\1\31\3\13"+
    "\1\151\11\1\23\13\1\116\1\13\1\42\1\31\11\1\1\302\2\13\1\303\1\13\1\42\1\13"+
    "\1\116\1\13\1\154\4\1\1\13\1\304\1\13\1\42\1\13\1\103\4\1\3\13\1\305\4\1\1"+
    "\75\1\306\1\13\1\151\2\1\1\13\1\130\1\13\1\130\2\1\1\127\1\13\1\51\1\1\3\13"+
    "\1\42\1\13\1\42\1\13\1\33\1\13\1\64\6\1\4\13\1\50\3\1\3\13\1\33\3\13\1\33"+
    "\60\1\1\161\2\13\1\31\2\1\1\70\1\1\1\161\2\13\2\1\1\13\1\50\1\120\1\161\1"+
    "\13\1\116\1\70\1\1\2\13\1\307\1\161\2\13\1\33\1\310\1\311\2\1\1\13\1\73\1"+
    "\156\5\1\1\312\1\313\1\50\2\13\1\154\1\1\1\120\1\77\1\57\1\60\1\74\1\1\1\314"+
    "\1\64\21\1\3\13\1\1\1\315\1\120\12\1\2\13\1\154\2\1\1\316\2\1\3\13\1\1\1\317"+
    "\1\120\2\1\2\13\1\32\1\1\1\120\3\1\1\13\1\103\1\1\1\120\26\1\4\13\1\120\1"+
    "\111\34\1\3\13\1\50\20\1\71\13\1\103\16\1\14\13\1\151\53\1\2\13\1\154\75\1"+
    "\44\13\1\116\33\1\43\13\1\50\1\13\1\154\1\120\6\1\1\13\1\155\1\1\3\13\1\1"+
    "\1\151\1\120\1\161\1\320\1\13\67\1\4\13\1\51\1\75\3\1\1\161\6\1\1\64\77\1"+
    "\6\13\1\32\1\130\1\50\1\103\66\1\5\13\1\256\3\13\1\150\1\321\1\322\1\323\3"+
    "\13\1\324\1\325\1\13\1\326\1\327\1\40\24\13\1\330\1\13\1\40\1\137\1\13\1\137"+
    "\1\13\1\256\1\13\1\256\1\154\1\13\1\154\1\13\1\60\1\13\1\60\1\13\1\331\3\332"+
    "\14\13\1\51\123\1\1\323\1\13\1\333\1\334\1\335\1\336\1\337\1\340\1\341\1\156"+
    "\1\342\1\156\24\1\55\13\1\116\2\1\103\13\1\51\15\13\1\155\150\13\1\64\25\1"+
    "\41\13\1\155\36\1");

  /* The ZZ_CMAP_A table has 3632 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\1\1\1\4\1\2\22\0\1\3\1\17\1\22\1\30\3\0\1\27\1\50\1\51\1\6\1"+
    "\17\1\55\1\17\1\31\1\5\1\13\10\25\1\12\1\52\1\54\1\20\1\21\1\20\2\0\2\7\1"+
    "\64\1\106\1\107\1\112\2\7\1\113\4\7\1\116\1\117\1\70\1\7\1\115\1\7\1\122\1"+
    "\24\1\104\1\123\3\7\1\41\1\23\1\42\1\0\1\10\1\0\1\65\1\62\1\75\1\72\1\73\1"+
    "\26\1\74\1\77\1\56\2\7\1\76\1\111\1\100\1\71\1\101\1\121\1\66\1\102\1\67\1"+
    "\105\1\103\1\120\1\110\1\63\1\114\1\43\1\47\1\44\1\17\6\0\1\1\24\0\1\7\1\0"+
    "\1\14\4\0\1\14\3\0\1\7\4\0\1\7\5\0\27\7\1\14\12\7\4\0\12\7\1\53\1\7\16\0\5"+
    "\7\7\0\1\7\1\0\1\7\1\0\5\15\1\14\2\15\2\14\4\15\1\14\1\15\6\14\1\15\1\14\3"+
    "\15\1\14\1\15\1\14\24\15\1\14\30\15\1\57\12\15\1\14\11\15\2\7\10\0\6\7\1\0"+
    "\26\7\2\0\1\7\6\0\10\7\10\0\13\7\5\0\3\7\15\0\12\11\4\0\6\7\1\0\1\7\17\0\2"+
    "\7\7\0\2\7\12\11\3\7\2\0\2\7\1\0\16\7\15\0\11\7\13\0\1\7\16\0\12\11\6\7\4"+
    "\0\2\7\4\0\1\7\5\0\6\7\4\0\1\7\11\0\1\7\3\0\1\7\7\0\11\7\7\0\5\7\17\0\26\7"+
    "\3\0\1\7\2\0\1\7\7\0\12\7\4\0\12\11\1\7\4\0\10\7\2\0\2\7\2\0\26\7\1\0\7\7"+
    "\1\0\1\7\3\0\4\7\3\0\1\7\20\0\1\7\15\0\2\7\1\0\3\7\23\0\6\7\4\0\2\7\1\0\2"+
    "\7\1\0\2\7\1\0\2\7\17\0\4\7\1\0\1\7\7\0\12\11\2\0\3\7\20\0\11\7\1\0\3\7\1"+
    "\0\16\7\1\0\2\7\1\0\5\7\3\0\1\7\2\0\1\7\30\0\1\7\13\0\10\7\2\0\1\7\3\0\1\7"+
    "\1\0\6\7\3\0\3\7\1\0\4\7\3\0\2\7\1\0\1\7\1\0\2\7\3\0\2\7\3\0\3\7\3\0\14\7"+
    "\13\0\10\7\1\0\2\7\10\0\3\7\5\0\4\7\1\0\5\7\3\0\1\7\3\0\2\7\15\0\13\7\2\0"+
    "\1\7\21\0\1\7\12\0\6\7\5\0\22\7\3\0\10\7\1\0\11\7\1\0\1\7\2\0\7\7\11\0\1\7"+
    "\1\0\2\7\14\0\12\11\7\0\2\7\1\0\1\7\2\0\2\7\1\0\1\7\2\0\1\7\6\0\4\7\1\0\7"+
    "\7\1\0\3\7\1\0\1\7\1\0\1\7\2\0\2\7\1\0\4\7\1\0\2\7\11\0\1\7\2\0\5\7\1\0\1"+
    "\7\11\0\12\11\2\0\14\7\1\0\24\7\13\0\5\7\3\0\6\7\4\0\4\7\3\0\1\7\3\0\2\7\7"+
    "\0\3\7\4\0\15\7\14\0\1\7\1\0\6\7\1\0\1\7\5\0\1\7\2\0\13\7\1\0\15\7\1\0\4\7"+
    "\2\0\7\7\1\0\1\7\1\0\4\7\2\0\1\7\1\0\4\7\2\0\7\7\1\0\1\7\1\0\4\7\2\0\17\7"+
    "\1\0\16\7\2\0\6\7\2\0\15\7\2\0\1\7\1\0\10\7\7\0\15\7\1\0\6\7\23\0\1\7\4\0"+
    "\1\7\3\0\11\7\1\0\1\7\5\0\17\7\1\0\16\7\2\0\14\7\13\0\1\7\15\0\7\7\7\0\16"+
    "\7\15\0\2\7\12\11\3\0\3\7\11\0\4\7\1\0\4\7\3\0\2\7\11\0\10\7\1\0\1\7\1\0\1"+
    "\7\1\0\1\7\1\0\6\7\1\0\7\7\1\0\1\7\3\0\3\7\1\0\7\7\3\0\4\7\2\0\6\7\14\0\2"+
    "\1\10\0\1\46\16\0\1\7\15\0\1\7\2\0\1\15\4\0\1\7\2\0\12\7\1\0\1\15\2\0\1\14"+
    "\1\7\1\15\2\7\1\15\6\0\1\15\1\0\1\7\1\0\1\7\1\0\4\7\1\0\13\7\2\0\4\7\5\0\5"+
    "\7\4\0\1\7\4\0\2\7\13\0\6\14\7\0\1\14\4\0\3\14\1\0\1\14\2\0\2\14\21\0\10\14"+
    "\10\0\1\14\3\0\6\14\12\0\1\61\2\0\1\60\4\0\2\14\4\0\4\14\1\0\1\14\4\0\2\14"+
    "\3\0\1\14\7\0\1\32\1\0\4\14\15\0\1\14\3\0\1\14\6\0\1\14\1\0\1\14\2\0\1\14"+
    "\4\0\1\14\2\0\1\14\13\0\1\16\3\0\2\14\2\0\2\14\4\0\2\14\6\0\2\14\10\0\2\14"+
    "\4\0\2\14\2\0\2\14\6\0\14\14\6\0\6\14\2\0\2\14\1\0\1\14\6\0\4\14\12\0\3\14"+
    "\1\45\1\0\2\14\1\0\3\14\15\0\1\35\1\36\23\0\1\37\2\0\1\40\22\0\1\14\21\0\3"+
    "\14\20\0\1\33\1\34\13\0\6\14\3\0\1\14\1\0\3\14\1\0\3\14\23\0\1\14\24\0\1\14"+
    "\7\0\2\14\14\0\2\14\11\0\5\7\6\0\4\7\3\0\2\7\14\0\10\7\7\0\10\7\1\0\7\7\6"+
    "\0\2\7\12\0\5\7\5\0\2\7\3\0\7\7\6\0\3\7\12\11\2\7\13\0\11\7\2\0\27\7\2\0\7"+
    "\7\1\0\3\7\1\0\4\7\1\0\4\7\2\0\6\7\3\0\1\7\1\0\1\7\2\0\5\7\1\0\12\7\12\11"+
    "\5\7\1\0\3\7\1\0\10\7\4\0\7\7\3\0\1\7\3\0\2\7\1\0\1\7\3\0\2\7\2\0\5\7\2\0"+
    "\1\7\1\0\1\7\30\0\3\7\3\0\6\7\2\0\6\7\2\0\6\7\11\0\7\7\4\0\5\7\3\0\5\7\5\0"+
    "\1\7\1\0\10\7\1\0\5\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0\12\7\6\0\12\7\2\0\6\7\2"+
    "\0\6\7\2\0\6\7\2\0\3\7\3\0\14\7\1\0\16\7\1\0\2\7\1\0\2\7\1\0\10\7\6\0\4\7"+
    "\4\0\16\7\2\0\1\7\1\0\14\7\1\0\2\7\3\0\1\7\2\0\4\7\1\0\2\7\12\0\10\7\6\0\6"+
    "\7\1\0\3\7\1\0\12\7\3\0\1\7\12\0\4\7\13\0\12\11\1\7\1\0\1\7\3\0\7\7\1\0\1"+
    "\7\1\0\4\7\1\0\17\7\1\0\2\7\14\0\3\7\4\0\2\7\1\0\1\7\20\0\4\7\10\0\1\7\13"+
    "\0\10\7\5\0\3\7\2\0\1\7\2\0\2\7\2\0\4\7\1\0\14\7\1\0\1\7\1\0\7\7\1\0\21\7"+
    "\1\0\4\7\2\0\10\7\1\0\7\7\1\0\13\7\1\15\1\0\4\7\1\0\5\7\1\0\1\7\3\0\14\7\2"+
    "\0\13\7\1\0\10\7\2\0\22\11\1\0\2\7\1\0\1\7\2\0\1\7\1\0\12\7\1\0\4\7\1\0\1"+
    "\7\1\0\1\7\6\0\1\7\4\0\1\7\1\0\1\7\1\0\1\7\1\0\3\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0\1\7\2\0\4\7\1\0\7\7\1\0\4\7\1"+
    "\0\4\7\1\0\1\7\1\0\12\7\1\0\5\7\1\0\3\7\1\0\5\7\1\0\5\7");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\2\4\1\5\2\6\2\7"+
    "\1\10\1\4\1\11\1\5\1\1\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\5\1\40\1\41\1\42\30\5"+
    "\1\43\1\44\1\11\1\0\3\5\3\0\1\45\1\46"+
    "\1\0\1\47\1\50\1\51\1\5\1\52\1\53\11\5"+
    "\1\54\1\5\1\55\22\5\1\56\11\5\1\44\3\5"+
    "\1\57\1\60\1\1\1\61\2\0\1\62\23\5\1\63"+
    "\12\5\1\64\3\5\1\65\17\5\1\44\1\0\2\5"+
    "\1\66\1\67\1\0\13\5\1\70\1\71\1\72\4\5"+
    "\1\73\15\5\1\74\16\5\1\75\2\5\1\76\1\5"+
    "\1\77\54\5\1\100\1\101\6\5\1\102\5\5\1\103"+
    "\12\5\1\104\2\5\1\105\13\5\1\106\2\5\1\107"+
    "\7\5\1\110\11\5\1\111\10\5\1\112\1\5\1\113"+
    "\3\5\1\114\10\5\1\115\5\5\1\116\1\117\1\120"+
    "\1\121\3\5\1\122\2\5\1\123\3\5\1\124\5\5"+
    "\1\125\1\5\1\126\6\5\1\127\1\5\1\130\1\131"+
    "\1\132\1\133\1\5\1\134\4\5\1\135\2\5\1\136"+
    "\1\5\1\137\2\5\1\140\1\141\3\5\1\142\1\143"+
    "\3\5\1\65\6\5\1\144\1\5\1\145\1\146\1\147"+
    "\1\150\1\151\1\152\6\5\1\153\1\154\1\155";

  private static int [] zzUnpackAction() {
    int [] result = new int[465];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\124\0\250\0\124\0\250\0\374\0\124\0\u0150"+
    "\0\u01a4\0\124\0\124\0\u0150\0\124\0\u01f8\0\u024c\0\u02a0"+
    "\0\u02f4\0\124\0\u0348\0\124\0\124\0\124\0\124\0\124"+
    "\0\124\0\124\0\124\0\124\0\u039c\0\u03f0\0\124\0\124"+
    "\0\124\0\u0444\0\124\0\u0498\0\u0150\0\124\0\124\0\u04ec"+
    "\0\u0150\0\124\0\124\0\u0540\0\u0594\0\u05e8\0\u063c\0\u0690"+
    "\0\u06e4\0\u0738\0\u078c\0\u07e0\0\u0834\0\u0888\0\u08dc\0\u0930"+
    "\0\u0984\0\u09d8\0\u0a2c\0\u0a80\0\u0ad4\0\u0b28\0\u0b7c\0\u0bd0"+
    "\0\u0c24\0\u0c78\0\u0ccc\0\u0d20\0\u0d74\0\124\0\u0dc8\0\u0e1c"+
    "\0\u0e70\0\u0ec4\0\u0f18\0\u0f6c\0\u0fc0\0\124\0\124\0\u1014"+
    "\0\u1068\0\124\0\u0150\0\u10bc\0\u0150\0\u0150\0\u1110\0\u1164"+
    "\0\u11b8\0\u120c\0\u1260\0\u12b4\0\u1308\0\u135c\0\u13b0\0\u0150"+
    "\0\u1404\0\u0150\0\u1458\0\u14ac\0\u1500\0\u1554\0\u15a8\0\u15fc"+
    "\0\u1650\0\u16a4\0\u16f8\0\u174c\0\u17a0\0\u17f4\0\u1848\0\u189c"+
    "\0\u18f0\0\u1944\0\u1998\0\u19ec\0\u0150\0\u1a40\0\u1a94\0\u1ae8"+
    "\0\u1b3c\0\u1b90\0\u1be4\0\u1c38\0\u1c8c\0\u1ce0\0\u1d34\0\u1d88"+
    "\0\u1ddc\0\u1e30\0\u0150\0\124\0\u0f18\0\124\0\u1e84\0\u1ed8"+
    "\0\124\0\u1f2c\0\u1f80\0\u1fd4\0\u2028\0\u207c\0\u20d0\0\u2124"+
    "\0\u2178\0\u21cc\0\u2220\0\u2274\0\u22c8\0\u231c\0\u2370\0\u23c4"+
    "\0\u2418\0\u246c\0\u24c0\0\u2514\0\u0150\0\u2568\0\u25bc\0\u2610"+
    "\0\u2664\0\u26b8\0\u270c\0\u2760\0\u27b4\0\u2808\0\u285c\0\u0150"+
    "\0\u28b0\0\u2904\0\u2958\0\u29ac\0\u2a00\0\u2a54\0\u2aa8\0\u2afc"+
    "\0\u2b50\0\u2ba4\0\u2bf8\0\u2c4c\0\u2ca0\0\u2cf4\0\u2d48\0\u2d9c"+
    "\0\u2df0\0\u2e44\0\u2e98\0\124\0\u1d34\0\u2eec\0\u2f40\0\u0150"+
    "\0\124\0\u2f94\0\u2fe8\0\u303c\0\u3090\0\u30e4\0\u3138\0\u318c"+
    "\0\u31e0\0\u3234\0\u3288\0\u32dc\0\u3330\0\u0150\0\u0150\0\u0150"+
    "\0\u3384\0\u33d8\0\u342c\0\u3480\0\u0150\0\u34d4\0\u3528\0\u357c"+
    "\0\u35d0\0\u3624\0\u3678\0\u36cc\0\u3720\0\u3774\0\u37c8\0\u381c"+
    "\0\u3870\0\u38c4\0\u0150\0\u3918\0\u396c\0\u39c0\0\u3a14\0\u3a68"+
    "\0\u3abc\0\u3b10\0\u3b64\0\u3bb8\0\u3c0c\0\u3c60\0\u3cb4\0\u3d08"+
    "\0\u3d5c\0\u0150\0\u3db0\0\u3e04\0\u0150\0\u3e58\0\124\0\u3eac"+
    "\0\u3f00\0\u3f54\0\u3fa8\0\u3ffc\0\u4050\0\u40a4\0\u40f8\0\u414c"+
    "\0\u41a0\0\u41f4\0\u4248\0\u429c\0\u42f0\0\u4344\0\u4398\0\u43ec"+
    "\0\u4440\0\u4494\0\u44e8\0\u453c\0\u4590\0\u45e4\0\u4638\0\u468c"+
    "\0\u46e0\0\u4734\0\u4788\0\u47dc\0\u4830\0\u4884\0\u48d8\0\u492c"+
    "\0\u4980\0\u49d4\0\u4a28\0\u4a7c\0\u4ad0\0\u4b24\0\u4b78\0\u4bcc"+
    "\0\u4c20\0\u4c74\0\u4cc8\0\u0150\0\u0150\0\u4d1c\0\u4d70\0\u4dc4"+
    "\0\u4e18\0\u4e6c\0\u4ec0\0\u0150\0\u4f14\0\u4f68\0\u4fbc\0\u5010"+
    "\0\u5064\0\u0150\0\u50b8\0\u510c\0\u5160\0\u51b4\0\u5208\0\u525c"+
    "\0\u52b0\0\u5304\0\u5358\0\u53ac\0\u0150\0\u5400\0\u5454\0\u0150"+
    "\0\u54a8\0\u54fc\0\u5550\0\u55a4\0\u55f8\0\u564c\0\u56a0\0\u56f4"+
    "\0\u5748\0\u579c\0\u57f0\0\u0150\0\u5844\0\u5898\0\u0150\0\u58ec"+
    "\0\u5940\0\u5994\0\u59e8\0\u5a3c\0\u5a90\0\u5ae4\0\u0150\0\u5b38"+
    "\0\u5b8c\0\u5be0\0\u5c34\0\u5c88\0\u5cdc\0\u5d30\0\u5d84\0\u5dd8"+
    "\0\u0150\0\u5e2c\0\u5e80\0\u5ed4\0\u5f28\0\u5f7c\0\u5fd0\0\u6024"+
    "\0\u6078\0\u0150\0\u60cc\0\u0150\0\u6120\0\u6174\0\u61c8\0\u0150"+
    "\0\u621c\0\u6270\0\u62c4\0\u6318\0\u636c\0\u63c0\0\u6414\0\u6468"+
    "\0\u0150\0\u64bc\0\u6510\0\u6564\0\u65b8\0\u660c\0\u0150\0\u0150"+
    "\0\u0150\0\u0150\0\u6660\0\u66b4\0\u6708\0\u0150\0\u675c\0\u67b0"+
    "\0\u0150\0\u6804\0\u6858\0\u68ac\0\u0150\0\u6900\0\u6954\0\u69a8"+
    "\0\u69fc\0\u6a50\0\u0150\0\u6aa4\0\u0150\0\u6af8\0\u6b4c\0\u6ba0"+
    "\0\u6bf4\0\u6c48\0\u6c9c\0\u0150\0\u6cf0\0\u0150\0\u0150\0\u0150"+
    "\0\u0150\0\u6d44\0\u0150\0\u6d98\0\u6dec\0\u6e40\0\u6e94\0\u0150"+
    "\0\u6ee8\0\u6f3c\0\u0150\0\u6f90\0\u0150\0\u6fe4\0\u7038\0\u0150"+
    "\0\u0150\0\u708c\0\u70e0\0\u7134\0\u0150\0\u0150\0\u7188\0\u71dc"+
    "\0\u7230\0\u0150\0\u7284\0\u72d8\0\u732c\0\u7380\0\u73d4\0\u7428"+
    "\0\u0150\0\u747c\0\u0150\0\u0150\0\u0150\0\u0150\0\u0150\0\u0150"+
    "\0\u74d0\0\u7524\0\u7578\0\u75cc\0\u7620\0\u7674\0\u0150\0\u0150"+
    "\0\u0150";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[465];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\2\10\1\2"+
    "\1\11\1\12\1\13\1\14\1\15\1\7\1\16\1\7"+
    "\1\17\1\2\1\10\1\11\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\10\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\10\1\65\3\10\1\66\2\10\1\67"+
    "\1\70\1\71\1\72\1\10\1\73\1\74\1\75\1\10"+
    "\1\76\1\77\1\100\1\101\1\10\1\102\1\103\125\0"+
    "\2\3\1\0\1\3\124\0\1\104\1\105\12\0\1\7"+
    "\111\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\42\10\12\0\2\11\11\0\1\11"+
    "\117\0\1\7\102\0\2\17\1\0\17\17\1\106\1\107"+
    "\100\17\7\0\5\10\1\0\1\10\6\0\3\10\24\0"+
    "\1\10\2\0\2\10\2\0\3\10\1\110\1\111\2\10"+
    "\1\112\32\10\23\113\1\114\100\113\31\0\1\115\135\0"+
    "\1\116\124\0\1\117\135\0\1\120\66\0\1\121\30\0"+
    "\1\122\60\0\5\10\1\0\1\10\6\0\2\10\1\123"+
    "\24\0\1\10\2\0\2\10\2\0\16\10\1\124\1\10"+
    "\1\125\21\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\1\10\1\126\40\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\3\10\1\127\3\10\1\130\5\10"+
    "\1\131\24\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\14\10\1\132\25\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\11\10\1\133\30\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\2\10"+
    "\2\0\1\10\1\134\2\10\1\135\10\10\1\136\24\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\4\10\1\137\35\10\7\0\5\10"+
    "\1\0\1\10\6\0\2\10\1\140\24\0\1\10\2\0"+
    "\2\10\2\0\5\10\1\141\34\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\24\0\1\10\2\0\2\10\2\0"+
    "\7\10\1\142\1\10\1\143\30\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\24\0\1\10\2\0\2\10\2\0"+
    "\14\10\1\144\1\10\1\145\2\10\1\146\4\10\1\147"+
    "\13\10\7\0\5\10\1\0\1\10\6\0\3\10\24\0"+
    "\1\10\2\0\2\10\2\0\7\10\1\150\4\10\1\151"+
    "\1\152\24\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\4\10\1\153\35\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\3\10\1\154\36\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\2\10"+
    "\2\0\17\10\1\155\1\156\21\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\24\0\1\10\2\0\2\10\2\0"+
    "\11\10\1\157\30\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\24\0\1\10\2\0\2\10\2\0\16\10\1\160"+
    "\7\10\1\161\13\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\24\0\1\10\2\0\2\10\2\0\3\10\1\162"+
    "\3\10\1\163\32\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\24\0\1\10\2\0\2\10\2\0\3\10\1\164"+
    "\36\10\7\0\5\10\1\0\1\10\6\0\2\10\1\165"+
    "\24\0\1\10\2\0\2\10\2\0\16\10\1\166\10\10"+
    "\1\167\12\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\11\10\1\170\30\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\7\10\1\171\32\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\2\10"+
    "\2\0\17\10\1\172\22\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\2\10\2\0\15\10"+
    "\1\173\24\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\1\10\1\174\13\10"+
    "\1\175\24\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\15\10\1\176\24\10"+
    "\2\104\1\0\121\104\6\105\1\177\115\105\13\0\1\17"+
    "\6\0\5\17\33\0\1\17\2\0\3\17\10\0\1\17"+
    "\2\0\1\17\1\0\1\17\2\0\1\17\22\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\2\10"+
    "\2\0\14\10\1\200\12\10\1\201\12\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\2\10"+
    "\2\0\7\10\1\202\32\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\2\10\2\0\4\10"+
    "\1\203\35\10\27\0\1\204\117\0\1\113\2\0\1\113"+
    "\1\205\32\0\1\113\2\0\3\113\10\0\1\113\2\0"+
    "\1\113\51\0\1\206\123\0\1\207\24\0\1\210\117\0"+
    "\1\211\60\0\5\10\1\0\1\10\6\0\3\10\24\0"+
    "\1\10\2\0\1\212\1\10\2\0\42\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\2\10"+
    "\2\0\4\10\1\213\1\214\34\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\24\0\1\10\2\0\2\10\2\0"+
    "\4\10\1\215\11\10\1\216\23\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\24\0\1\10\2\0\2\10\2\0"+
    "\3\10\1\217\36\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\24\0\1\10\2\0\2\10\2\0\5\10\1\220"+
    "\34\10\7\0\5\10\1\0\1\10\6\0\3\10\24\0"+
    "\1\10\2\0\2\10\2\0\3\10\1\221\13\10\1\222"+
    "\1\223\16\10\1\224\2\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\2\10\2\0\17\10"+
    "\1\225\22\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\23\10\1\226\16\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\11\10\1\227\30\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\2\10"+
    "\2\0\7\10\1\230\1\10\1\231\30\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\2\10"+
    "\2\0\15\10\1\232\24\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\2\10\2\0\13\10"+
    "\1\233\26\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\20\10\1\234\21\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\10\10\1\235\4\10\1\236\2\10"+
    "\1\237\21\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\3\10\1\240\36\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\5\10\1\241\3\10\1\242\30\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\4\10\1\243\11\10\1\244\23\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\11\10\1\245\30\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\2\10"+
    "\2\0\3\10\1\246\36\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\2\10\2\0\11\10"+
    "\1\247\30\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\4\10\1\250\7\10"+
    "\1\251\25\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\10\10\1\252\31\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\11\10\1\253\30\10\7\0\5\10"+
    "\1\0\1\10\6\0\2\10\1\254\24\0\1\10\2\0"+
    "\2\10\2\0\42\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\24\0\1\10\2\0\2\10\2\0\15\10\1\255"+
    "\24\10\7\0\5\10\1\0\1\10\6\0\3\10\24\0"+
    "\1\10\2\0\2\10\2\0\5\10\1\256\34\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\24\0\1\10\2\0"+
    "\1\257\1\10\2\0\42\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\2\10\2\0\10\10"+
    "\1\260\31\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\13\10\1\261\26\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\10\10\1\262\31\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\2\10"+
    "\2\0\17\10\1\263\22\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\2\10\2\0\3\10"+
    "\1\264\7\10\1\265\26\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\2\10\2\0\5\10"+
    "\1\266\34\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\11\10\1\267\30\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\1\270\1\10\2\0\42\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\24\0\1\10\2\0\2\10\2\0"+
    "\17\10\1\271\22\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\24\0\1\10\2\0\2\10\2\0\11\10\1\272"+
    "\30\10\7\0\5\10\1\0\1\10\6\0\3\10\24\0"+
    "\1\10\2\0\1\273\1\10\2\0\42\10\5\105\1\274"+
    "\1\275\115\105\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\20\10\1\276\21\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\1\277\1\10\2\0\42\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\24\0\1\10\2\0\2\10\2\0"+
    "\27\10\1\300\12\10\51\0\1\301\103\0\1\302\101\0"+
    "\5\10\1\0\1\10\6\0\3\10\24\0\1\10\2\0"+
    "\2\10\2\0\5\10\1\303\34\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\24\0\1\10\2\0\2\10\2\0"+
    "\5\10\1\304\34\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\24\0\1\10\2\0\2\10\2\0\11\10\1\305"+
    "\30\10\7\0\5\10\1\0\1\10\6\0\3\10\24\0"+
    "\1\10\2\0\2\10\2\0\7\10\1\306\32\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\24\0\1\10\2\0"+
    "\2\10\2\0\13\10\1\307\26\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\24\0\1\10\2\0\1\310\1\10"+
    "\2\0\42\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\11\10\1\311\30\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\14\10\1\312\25\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\2\10"+
    "\2\0\14\10\1\313\25\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\2\10\2\0\5\10"+
    "\1\314\34\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\23\10\1\315\16\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\11\10\1\316\30\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\2\10"+
    "\2\0\11\10\1\317\30\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\2\10\2\0\16\10"+
    "\1\320\23\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\13\10\1\321\26\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\13\10\1\322\26\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\2\10"+
    "\2\0\11\10\1\323\30\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\2\10\2\0\4\10"+
    "\1\324\35\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\11\10\1\325\30\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\3\10\1\326\36\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\2\10"+
    "\2\0\23\10\1\327\16\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\2\10\2\0\14\10"+
    "\1\330\25\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\11\10\1\331\30\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\27\10\1\332\12\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\2\10"+
    "\2\0\4\10\1\333\35\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\2\10\2\0\20\10"+
    "\1\334\1\335\20\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\24\0\1\10\2\0\2\10\2\0\3\10\1\336"+
    "\36\10\7\0\5\10\1\0\1\10\6\0\3\10\24\0"+
    "\1\10\2\0\2\10\2\0\16\10\1\337\23\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\24\0\1\10\2\0"+
    "\2\10\2\0\20\10\1\340\21\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\24\0\1\10\2\0\2\10\2\0"+
    "\23\10\1\341\16\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\24\0\1\10\2\0\2\10\2\0\3\10\1\342"+
    "\36\10\7\0\5\10\1\0\1\10\6\0\3\10\24\0"+
    "\1\10\2\0\2\10\2\0\20\10\1\343\21\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\24\0\1\10\2\0"+
    "\1\344\1\10\2\0\42\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\2\10\2\0\3\10"+
    "\1\345\36\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\11\10\1\346\30\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\16\10\1\347\23\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\2\10"+
    "\2\0\11\10\1\350\30\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\1\351\1\10\2\0"+
    "\42\10\7\0\5\10\1\0\1\10\6\0\3\10\24\0"+
    "\1\10\2\0\2\10\2\0\23\10\1\352\16\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\24\0\1\10\2\0"+
    "\2\10\2\0\14\10\1\353\25\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\24\0\1\10\2\0\2\10\2\0"+
    "\14\10\1\354\25\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\24\0\1\10\2\0\2\10\2\0\7\10\1\355"+
    "\13\10\1\356\16\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\24\0\1\10\2\0\1\357\1\10\2\0\42\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\4\10\1\360\35\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\2\10"+
    "\2\0\13\10\1\361\26\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\2\10\2\0\11\10"+
    "\1\362\30\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\7\10\1\363\32\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\14\10\1\364\25\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\2\10"+
    "\2\0\11\10\1\365\30\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\2\10\2\0\14\10"+
    "\1\366\25\10\51\0\1\367\61\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\1\370\1\10\2\0"+
    "\42\10\7\0\1\10\1\371\3\10\1\0\1\10\6\0"+
    "\3\10\24\0\1\10\2\0\2\10\2\0\42\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\24\0\1\10\2\0"+
    "\2\10\2\0\12\10\1\372\27\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\24\0\1\10\2\0\2\10\2\0"+
    "\14\10\1\373\25\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\24\0\1\10\2\0\2\10\2\0\11\10\1\374"+
    "\30\10\7\0\5\10\1\0\1\10\6\0\3\10\24\0"+
    "\1\10\2\0\2\10\2\0\16\10\1\375\23\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\24\0\1\10\2\0"+
    "\2\10\2\0\4\10\1\376\35\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\24\0\1\10\2\0\1\377\1\10"+
    "\2\0\42\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\3\10\1\u0100\36\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\7\10\1\u0101\32\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\1\u0102"+
    "\1\10\2\0\42\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\24\0\1\10\2\0\2\10\2\0\11\10\1\u0103"+
    "\30\10\7\0\5\10\1\0\1\10\6\0\3\10\24\0"+
    "\1\10\2\0\1\u0104\1\10\2\0\42\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\2\10"+
    "\2\0\4\10\1\u0105\35\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\2\10\2\0\11\10"+
    "\1\u0106\30\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\16\10\1\u0107\23\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\4\10\1\u0108\35\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\2\10"+
    "\2\0\23\10\1\u0109\16\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\2\10\2\0\4\10"+
    "\1\u010a\35\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\17\10\1\u010b\22\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\11\10\1\u010c\30\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\2\10"+
    "\2\0\5\10\1\u010d\34\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\2\10\2\0\11\10"+
    "\1\u010e\30\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\4\10\1\u010f\35\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\12\10\1\u0110\27\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\2\10"+
    "\2\0\11\10\1\u0111\30\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\2\10\2\0\11\10"+
    "\1\u0112\30\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\5\10\1\u0113\34\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\16\10\1\u0114\23\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\2\10"+
    "\2\0\16\10\1\u0115\23\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\2\10\2\0\16\10"+
    "\1\u0116\23\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\5\10\1\u0117\34\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\14\10\1\u0118\25\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\2\10"+
    "\2\0\14\10\1\u0119\25\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\2\10\2\0\13\10"+
    "\1\u011a\26\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\1\u011b\1\10\2\0\42\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\24\0\1\10\2\0"+
    "\1\u011c\1\10\2\0\42\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\2\10\2\0\4\10"+
    "\1\u011d\5\10\1\u011e\27\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\2\10\2\0\4\10"+
    "\1\u011f\35\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\13\10\1\u0120\26\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\3\10\1\u0121\36\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\2\10"+
    "\2\0\15\10\1\u0122\24\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\2\10\2\0\4\10"+
    "\1\u0123\35\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\11\10\1\u0124\30\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\1\10\1\u0125\40\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\2\10"+
    "\2\0\3\10\1\u0126\36\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\2\10\2\0\6\10"+
    "\1\u0127\33\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\7\10\1\u0128\32\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\14\10\1\u0129\25\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\2\10"+
    "\2\0\17\10\1\u012a\22\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\2\10\2\0\3\10"+
    "\1\u012b\36\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\20\10\1\u012c\21\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\32\10\1\u012d\7\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\2\10"+
    "\2\0\13\10\1\u012e\26\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\2\10\2\0\4\10"+
    "\1\u012f\35\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\4\10\1\u0130\35\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\10\10\1\u0131\31\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\2\10"+
    "\2\0\20\10\1\u0132\21\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\2\10\2\0\36\10"+
    "\1\u0133\3\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\3\10\1\u0134\36\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\13\10\1\u0135\26\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\2\10"+
    "\2\0\11\10\1\u0136\30\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\2\10\2\0\3\10"+
    "\1\u0137\36\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\16\10\1\u0138\23\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\14\10\1\u0139\25\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\2\10"+
    "\2\0\20\10\1\u013a\21\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\2\10\2\0\4\10"+
    "\1\u013b\35\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\16\10\1\u013c\23\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\20\10\1\u013d\21\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\1\u013e"+
    "\1\10\2\0\42\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\24\0\1\10\2\0\2\10\2\0\4\10\1\u013f"+
    "\35\10\7\0\5\10\1\0\1\10\6\0\3\10\24\0"+
    "\1\10\2\0\2\10\2\0\10\10\1\u0140\31\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\24\0\1\10\2\0"+
    "\2\10\2\0\11\10\1\u0141\30\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\24\0\1\10\2\0\1\u0142\1\10"+
    "\2\0\11\10\1\u0143\30\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\2\10\2\0\13\10"+
    "\1\u0144\26\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\20\10\1\u0145\21\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\3\10\1\u0146\36\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\2\10"+
    "\2\0\11\10\1\u0147\30\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\1\u0148\1\10\2\0"+
    "\42\10\7\0\5\10\1\0\1\10\6\0\3\10\24\0"+
    "\1\10\2\0\2\10\2\0\5\10\1\u0149\34\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\24\0\1\10\2\0"+
    "\2\10\2\0\13\10\1\u014a\26\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\24\0\1\10\2\0\2\10\2\0"+
    "\32\10\1\u014b\7\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\24\0\1\10\2\0\2\10\2\0\10\10\1\u014c"+
    "\31\10\7\0\5\10\1\0\1\10\6\0\3\10\24\0"+
    "\1\10\2\0\2\10\2\0\16\10\1\u014d\23\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\24\0\1\10\2\0"+
    "\2\10\2\0\20\10\1\u014e\21\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\24\0\1\10\2\0\2\10\2\0"+
    "\11\10\1\u014f\30\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\24\0\1\10\2\0\2\10\2\0\5\10\1\u0150"+
    "\34\10\7\0\1\10\1\u0151\3\10\1\0\1\10\6\0"+
    "\3\10\24\0\1\10\2\0\2\10\2\0\42\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\24\0\1\10\2\0"+
    "\2\10\2\0\11\10\1\u0152\30\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\24\0\1\10\2\0\2\10\2\0"+
    "\14\10\1\u0153\25\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\24\0\1\10\2\0\2\10\2\0\4\10\1\u0154"+
    "\35\10\7\0\5\10\1\0\1\10\6\0\3\10\24\0"+
    "\1\10\2\0\2\10\2\0\4\10\1\u0155\35\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\24\0\1\10\2\0"+
    "\2\10\2\0\3\10\1\u0156\36\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\24\0\1\10\2\0\2\10\2\0"+
    "\5\10\1\u0157\34\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\24\0\1\10\2\0\2\10\2\0\1\u0158\41\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\11\10\1\u0159\30\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\2\10"+
    "\2\0\11\10\1\u015a\30\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\2\10\2\0\11\10"+
    "\1\u015b\30\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\11\10\1\u015c\30\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\23\10\1\u015d\16\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\1\u015e"+
    "\1\10\2\0\42\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\24\0\1\10\2\0\2\10\2\0\20\10\1\u015f"+
    "\21\10\7\0\5\10\1\0\1\10\6\0\3\10\24\0"+
    "\1\10\2\0\2\10\2\0\11\10\1\u0160\30\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\24\0\1\10\2\0"+
    "\2\10\2\0\20\10\1\u0161\21\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\24\0\1\10\2\0\2\10\2\0"+
    "\5\10\1\u0162\34\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\24\0\1\10\2\0\2\10\2\0\3\10\1\u0163"+
    "\36\10\7\0\5\10\1\0\1\10\6\0\3\10\24\0"+
    "\1\10\2\0\2\10\2\0\3\10\1\u0164\36\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\24\0\1\10\2\0"+
    "\2\10\2\0\17\10\1\u0165\22\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\24\0\1\10\2\0\2\10\2\0"+
    "\3\10\1\u0166\36\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\24\0\1\10\2\0\2\10\2\0\5\10\1\u0167"+
    "\34\10\7\0\5\10\1\0\1\10\6\0\3\10\24\0"+
    "\1\10\2\0\2\10\2\0\16\10\1\u0168\23\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\24\0\1\10\2\0"+
    "\2\10\2\0\21\10\1\u0169\20\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\24\0\1\10\2\0\2\10\2\0"+
    "\20\10\1\u016a\21\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\24\0\1\10\2\0\2\10\2\0\5\10\1\u016b"+
    "\34\10\7\0\5\10\1\0\1\10\6\0\3\10\24\0"+
    "\1\10\2\0\2\10\2\0\20\10\1\u016c\21\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\24\0\1\10\2\0"+
    "\2\10\2\0\11\10\1\u016d\30\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\24\0\1\10\2\0\1\u016e\1\10"+
    "\2\0\42\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\1\u016f\1\10\2\0\42\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\24\0\1\10\2\0"+
    "\2\10\2\0\10\10\1\u0170\31\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\24\0\1\10\2\0\2\10\2\0"+
    "\5\10\1\u0171\34\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\24\0\1\10\2\0\1\u0172\1\10\2\0\42\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\1\u0173\1\10\2\0\42\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\24\0\1\10\2\0\2\10\2\0"+
    "\3\10\1\u0174\36\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\24\0\1\10\2\0\1\u0175\1\10\2\0\42\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\1\u0176\1\10\2\0\42\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\24\0\1\10\2\0\1\u0177\1\10"+
    "\2\0\42\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\11\10\1\u0178\30\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\27\10\1\u0179\12\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\1\u017a"+
    "\1\10\2\0\42\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\24\0\1\10\2\0\2\10\2\0\7\10\1\u017b"+
    "\32\10\7\0\5\10\1\0\1\10\6\0\3\10\24\0"+
    "\1\10\2\0\1\u017c\1\10\2\0\42\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\2\10"+
    "\2\0\4\10\1\u017d\35\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\2\10\2\0\14\10"+
    "\1\u017e\25\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\10\10\1\u017f\31\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\20\10\1\u0180\21\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\2\10"+
    "\2\0\20\10\1\u0181\21\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\2\10\2\0\20\10"+
    "\1\u0182\21\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\4\10\1\u0183\35\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\20\10\1\u0184\21\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\1\u0185"+
    "\1\10\2\0\42\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\24\0\1\10\2\0\2\10\2\0\10\10\1\u0186"+
    "\31\10\7\0\5\10\1\0\1\10\6\0\3\10\24\0"+
    "\1\10\2\0\2\10\2\0\11\10\1\u0187\30\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\24\0\1\10\2\0"+
    "\2\10\2\0\14\10\1\u0188\25\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\24\0\1\10\2\0\2\10\2\0"+
    "\4\10\1\u0189\35\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\24\0\1\10\2\0\2\10\2\0\7\10\1\u018a"+
    "\32\10\7\0\5\10\1\0\1\10\6\0\3\10\24\0"+
    "\1\10\2\0\1\u018b\1\10\2\0\42\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\1\u018c"+
    "\1\10\2\0\42\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\24\0\1\10\2\0\2\10\2\0\12\10\1\u018d"+
    "\27\10\7\0\5\10\1\0\1\10\6\0\3\10\24\0"+
    "\1\10\2\0\2\10\2\0\11\10\1\u018e\30\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\24\0\1\10\2\0"+
    "\1\u018f\1\10\2\0\42\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\2\10\2\0\27\10"+
    "\1\u0190\12\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\7\10\1\u0191\32\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\16\10\1\u0192\23\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\2\10"+
    "\2\0\1\10\1\u0193\40\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\2\10\2\0\21\10"+
    "\1\u0194\20\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\5\10\1\u0195\34\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\5\10\1\u0196\34\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\2\10"+
    "\2\0\5\10\1\u0197\34\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\2\10\2\0\21\10"+
    "\1\u0198\20\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\7\10\1\u0199\32\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\16\10\1\u019a\23\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\2\10"+
    "\2\0\32\10\1\u019b\7\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\2\10\2\0\10\10"+
    "\1\u019c\31\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\13\10\1\u019d\26\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\1\10\1\u019e\40\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\2\10"+
    "\2\0\11\10\1\u019f\30\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\2\10\2\0\11\10"+
    "\1\u01a0\30\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\11\10\1\u01a1\30\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\16\10\1\u01a2\23\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\2\10"+
    "\2\0\20\10\1\u01a3\21\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\2\10\2\0\14\10"+
    "\1\u01a4\25\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\16\10\1\u01a5\23\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\16\10\1\u01a6\23\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\2\10"+
    "\2\0\7\10\1\u01a7\32\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\2\10\2\0\20\10"+
    "\1\u01a8\21\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\24\0\1\10\2\0\2\10\2\0\7\10\1\u01a9\32\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\24\0\1\10"+
    "\2\0\2\10\2\0\11\10\1\u01aa\30\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\24\0\1\10\2\0\2\10"+
    "\2\0\16\10\1\u01ab\23\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\1\u01ac\1\10\2\0"+
    "\42\10\7\0\5\10\1\0\1\10\6\0\3\10\24\0"+
    "\1\10\2\0\2\10\2\0\11\10\1\u01ad\30\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\24\0\1\10\2\0"+
    "\1\u01ae\1\10\2\0\42\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\1\u01af\1\10\2\0"+
    "\42\10\7\0\5\10\1\0\1\10\6\0\3\10\24\0"+
    "\1\10\2\0\2\10\2\0\11\10\1\u01b0\30\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\24\0\1\10\2\0"+
    "\2\10\2\0\16\10\1\u01b1\23\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\24\0\1\10\2\0\2\10\2\0"+
    "\5\10\1\u01b2\34\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\24\0\1\10\2\0\2\10\2\0\3\10\1\u01b3"+
    "\36\10\7\0\5\10\1\0\1\10\6\0\3\10\24\0"+
    "\1\10\2\0\2\10\2\0\3\10\1\u01b4\36\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\24\0\1\10\2\0"+
    "\2\10\2\0\12\10\1\u01b5\27\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\24\0\1\10\2\0\2\10\2\0"+
    "\1\10\1\u01b6\40\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\24\0\1\10\2\0\2\10\2\0\10\10\1\u01b7"+
    "\31\10\7\0\5\10\1\0\1\10\6\0\3\10\24\0"+
    "\1\10\2\0\2\10\2\0\5\10\1\u01b8\34\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\24\0\1\10\2\0"+
    "\2\10\2\0\16\10\1\u01b9\23\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\24\0\1\10\2\0\2\10\2\0"+
    "\16\10\1\u01ba\23\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\24\0\1\10\2\0\2\10\2\0\16\10\1\u01bb"+
    "\23\10\7\0\5\10\1\0\1\10\6\0\3\10\24\0"+
    "\1\10\2\0\2\10\2\0\16\10\1\u01bc\23\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\24\0\1\10\2\0"+
    "\2\10\2\0\7\10\1\u01bd\32\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\24\0\1\10\2\0\2\10\2\0"+
    "\7\10\1\u01be\32\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\24\0\1\10\2\0\2\10\2\0\3\10\1\u01bf"+
    "\36\10\7\0\5\10\1\0\1\10\6\0\3\10\24\0"+
    "\1\10\2\0\2\10\2\0\5\10\1\u01c0\34\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\24\0\1\10\2\0"+
    "\2\10\2\0\14\10\1\u01c1\25\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\24\0\1\10\2\0\2\10\2\0"+
    "\11\10\1\u01c2\30\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\24\0\1\10\2\0\2\10\2\0\20\10\1\u01c3"+
    "\21\10\7\0\5\10\1\0\1\10\6\0\3\10\24\0"+
    "\1\10\2\0\2\10\2\0\20\10\1\u01c4\21\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\24\0\1\10\2\0"+
    "\2\10\2\0\5\10\1\u01c5\34\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\24\0\1\10\2\0\2\10\2\0"+
    "\12\10\1\u01c6\27\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\24\0\1\10\2\0\2\10\2\0\16\10\1\u01c7"+
    "\23\10\7\0\5\10\1\0\1\10\6\0\3\10\24\0"+
    "\1\10\2\0\2\10\2\0\16\10\1\u01c8\23\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\24\0\1\10\2\0"+
    "\1\u01c9\1\10\2\0\42\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\24\0\1\10\2\0\1\u01ca\1\10\2\0"+
    "\42\10\7\0\5\10\1\0\1\10\6\0\3\10\24\0"+
    "\1\10\2\0\2\10\2\0\16\10\1\u01cb\23\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\24\0\1\10\2\0"+
    "\2\10\2\0\14\10\1\u01cc\25\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\24\0\1\10\2\0\2\10\2\0"+
    "\7\10\1\u01cd\32\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\24\0\1\10\2\0\2\10\2\0\13\10\1\u01ce"+
    "\26\10\7\0\5\10\1\0\1\10\6\0\3\10\24\0"+
    "\1\10\2\0\2\10\2\0\20\10\1\u01cf\21\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\24\0\1\10\2\0"+
    "\2\10\2\0\16\10\1\u01d0\23\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\24\0\1\10\2\0\2\10\2\0"+
    "\11\10\1\u01d1\30\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[30408];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\2\1\1\11\2\1\2\11"+
    "\1\1\1\11\4\1\1\11\1\1\11\11\2\1\3\11"+
    "\1\1\1\11\2\1\2\11\2\1\2\11\32\1\1\11"+
    "\1\0\3\1\3\0\2\11\1\0\1\1\1\11\61\1"+
    "\1\11\1\1\1\11\2\0\1\11\62\1\1\11\1\0"+
    "\3\1\1\11\1\0\64\1\1\11\332\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[465];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _ResLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _ResLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 110: break;
          case 2: 
            { return NLS;
            }
          case 111: break;
          case 3: 
            { return WS;
            }
          case 112: break;
          case 4: 
            { return SYMBOL;
            }
          case 113: break;
          case 5: 
            { return IDENTIFIER;
            }
          case 114: break;
          case 6: 
            { return INT;
            }
          case 115: break;
          case 7: 
            { return MATHSYMBOL;
            }
          case 116: break;
          case 8: 
            { return TRI_EQUALS;
            }
          case 117: break;
          case 9: 
            { return STRING;
            }
          case 118: break;
          case 10: 
            { return POUND;
            }
          case 119: break;
          case 11: 
            { return DOT;
            }
          case 120: break;
          case 12: 
            { return DBL_BAR;
            }
          case 121: break;
          case 13: 
            { return LANGLE;
            }
          case 122: break;
          case 14: 
            { return RANGLE;
            }
          case 123: break;
          case 15: 
            { return LCEIL;
            }
          case 124: break;
          case 16: 
            { return RCEIL;
            }
          case 125: break;
          case 17: 
            { return LCUP;
            }
          case 126: break;
          case 18: 
            { return RCUP;
            }
          case 127: break;
          case 19: 
            { return LBRACK;
            }
          case 128: break;
          case 20: 
            { return RBRACK;
            }
          case 129: break;
          case 21: 
            { return LBRACE;
            }
          case 130: break;
          case 22: 
            { return RBRACE;
            }
          case 131: break;
          case 23: 
            { return BIG_UNION;
            }
          case 132: break;
          case 24: 
            { return PRIME;
            }
          case 133: break;
          case 25: 
            { return BAR;
            }
          case 134: break;
          case 26: 
            { return LPAREN;
            }
          case 135: break;
          case 27: 
            { return RPAREN;
            }
          case 136: break;
          case 28: 
            { return COLON;
            }
          case 137: break;
          case 29: 
            { return TRICOLON;
            }
          case 138: break;
          case 30: 
            { return SEMICOLON;
            }
          case 139: break;
          case 31: 
            { return COMMA;
            }
          case 140: break;
          case 32: 
            { return LAMBDA;
            }
          case 141: break;
          case 33: 
            { return EXISTS;
            }
          case 142: break;
          case 34: 
            { return FORALL;
            }
          case 143: break;
          case 35: 
            { return LINE_COMMENT;
            }
          case 144: break;
          case 36: 
            { return MULTILINE_COMMENT;
            }
          case 145: break;
          case 37: 
            { return DBL_LBRACE;
            }
          case 146: break;
          case 38: 
            { return DBL_RBRACE;
            }
          case 147: break;
          case 39: 
            { return COLON_EQUALS;
            }
          case 148: break;
          case 40: 
            { return COLON_COLON;
            }
          case 149: break;
          case 41: 
            { return IF;
            }
          case 150: break;
          case 42: 
            { return IS;
            }
          case 151: break;
          case 43: 
            { return BY;
            }
          case 152: break;
          case 44: 
            { return OF;
            }
          case 153: break;
          case 45: 
            { return DO;
            }
          case 154: break;
          case 46: 
            { return PROG_IF;
            }
          case 155: break;
          case 47: 
            { return FOR;
            }
          case 156: break;
          case 48: 
            { return CHAR;
            }
          case 157: break;
          case 49: 
            { return TRIPLE_DOT;
            }
          case 158: break;
          case 50: 
            { return COLON_EQUALS_COLON;
            }
          case 159: break;
          case 51: 
            { return END;
            }
          case 160: break;
          case 52: 
            { return VAR;
            }
          case 161: break;
          case 53: 
            { return DEFINITION;
            }
          case 162: break;
          case 54: 
            { return FROM;
            }
          case 163: break;
          case 55: 
            { return IND_BASE;
            }
          case 164: break;
          case 56: 
            { return PARAM_TYPE;
            }
          case 165: break;
          case 57: 
            { return TRUE;
            }
          case 166: break;
          case 58: 
            { return THEN;
            }
          case 167: break;
          case 59: 
            { return ELSE;
            }
          case 168: break;
          case 60: 
            { return USES;
            }
          case 169: break;
          case 61: 
            { return FAMILY_TYPE;
            }
          case 170: break;
          case 62: 
            { return FALSE;
            }
          case 171: break;
          case 63: 
            { return IND_HYPO;
            }
          case 172: break;
          case 64: 
            { return WHILE;
            }
          case 173: break;
          case 65: 
            { return FAMILY;
            }
          case 174: break;
          case 66: 
            { return ALTERS;
            }
          case 175: break;
          case 67: 
            { return PRECIS;
            }
          case 176: break;
          case 68: 
            { return CLEARS;
            }
          case 177: break;
          case 69: 
            { return VALUED;
            }
          case 178: break;
          case 70: 
            { return RECORD;
            }
          case 179: break;
          case 71: 
            { return NOTICE;
            }
          case 180: break;
          case 72: 
            { return CONCEPT;
            }
          case 181: break;
          case 73: 
            { return ENSURES;
            }
          case 182: break;
          case 74: 
            { return UPDATES;
            }
          case 183: break;
          case 75: 
            { return DEFINES;
            }
          case 184: break;
          case 76: 
            { return MODELED;
            }
          case 185: break;
          case 77: 
            { return THEOREM;
            }
          case 186: break;
          case 78: 
            { return REALIZED;
            }
          case 187: break;
          case 79: 
            { return REPLACES;
            }
          case 188: break;
          case 80: 
            { return RESTORES;
            }
          case 189: break;
          case 81: 
            { return REQUIRES;
            }
          case 190: break;
          case 82: 
            { return ENHANCED;
            }
          case 191: break;
          case 83: 
            { return EXEMPLAR;
            }
          case 192: break;
          case 84: 
            { return CHANGING;
            }
          case 193: break;
          case 85: 
            { return FACILITY;
            }
          case 194: break;
          case 86: 
            { return IMPLICIT;
            }
          case 195: break;
          case 87: 
            { return CART_PROD;
            }
          case 196: break;
          case 88: 
            { return COROLLARY;
            }
          case 197: break;
          case 89: 
            { return CHAINABLE;
            }
          case 198: break;
          case 90: 
            { return PROCEDURE;
            }
          case 199: break;
          case 91: 
            { return OTHERWISE;
            }
          case 200: break;
          case 92: 
            { return EVALUATES;
            }
          case 201: break;
          case 93: 
            { return PRESERVES;
            }
          case 202: break;
          case 94: 
            { return EXTENSION;
            }
          case 203: break;
          case 95: 
            { return INDUCTIVE;
            }
          case 204: break;
          case 96: 
            { return RECURSIVE;
            }
          case 205: break;
          case 97: 
            { return OPERATION;
            }
          case 206: break;
          case 98: 
            { return DECREASING;
            }
          case 207: break;
          case 99: 
            { return EXTERNALLY;
            }
          case 208: break;
          case 100: 
            { return CATEGORICAL;
            }
          case 209: break;
          case 101: 
            { return CONSTRAINTS;
            }
          case 210: break;
          case 102: 
            { return CONVENTIONS;
            }
          case 211: break;
          case 103: 
            { return ENHANCEMENT;
            }
          case 212: break;
          case 104: 
            { return MAINTAINING;
            }
          case 213: break;
          case 105: 
            { return REALIZATION;
            }
          case 214: break;
          case 106: 
            { return RECOGNITION;
            }
          case 215: break;
          case 107: 
            { return WHICH_ENTAILS;
            }
          case 216: break;
          case 108: 
            { return INITIALIZATION;
            }
          case 217: break;
          case 109: 
            { return CORRESPONDENCE;
            }
          case 218: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
