/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package edu.clemson.resolve.jetbrains.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import edu.clemson.resolve.jetbrains.ResTypes;
import java.util.*;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static edu.clemson.resolve.jetbrains.RESOLVEParserDefinition.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>ResLexer.flex</tt>
 */
class _ResLexer implements FlexLexer, ResTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15168 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15"+
    "\1\17\1\15\1\20\1\21\12\15\1\22\10\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1"+
    "\33\1\34\1\23\1\35\1\36\2\23\1\15\1\37\3\23\1\40\10\23\1\41\1\42\20\23\1\43"+
    "\2\23\1\44\5\23\1\45\4\23\1\46\1\47\4\23\51\15\1\50\3\15\1\51\1\52\4\15\1"+
    "\53\12\23\1\54\u0381\23");

  /* The ZZ_CMAP_Y table has 2880 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\22\1\23\1\24\3\22\1\25\10\13\1\26\12\13"+
    "\1\27\1\13\1\30\1\27\1\13\1\31\4\1\1\13\1\32\1\33\2\1\2\13\1\32\1\1\1\34\1"+
    "\27\5\13\1\35\1\36\1\37\1\1\1\40\1\13\1\1\1\41\5\13\1\42\1\43\1\44\1\13\1"+
    "\32\1\45\1\13\1\46\1\47\1\1\1\13\1\50\4\1\1\13\1\51\4\1\1\52\2\13\1\53\1\1"+
    "\1\54\1\55\1\27\1\56\1\57\1\60\1\61\1\62\1\63\1\55\1\64\1\65\1\57\1\60\1\66"+
    "\1\1\1\67\1\70\1\71\1\72\1\73\1\60\1\74\1\1\1\75\1\55\1\76\1\77\1\57\1\60"+
    "\1\74\1\1\1\63\1\55\1\43\1\100\1\101\1\102\1\103\1\1\1\75\1\70\1\1\1\104\1"+
    "\40\1\60\1\53\1\1\1\105\1\55\1\1\1\104\1\40\1\60\1\106\1\1\1\62\1\55\1\107"+
    "\1\104\1\40\1\13\1\110\1\62\1\111\1\55\1\112\1\113\1\114\1\13\1\115\1\116"+
    "\1\1\1\70\1\1\1\27\2\13\1\117\1\116\1\120\2\1\1\121\1\122\1\123\1\124\1\125"+
    "\1\126\2\1\1\75\1\1\1\120\1\1\1\127\1\13\1\130\1\1\1\131\7\1\2\13\1\32\1\111"+
    "\1\120\1\132\1\133\1\134\1\135\1\120\2\13\1\136\2\13\1\137\24\13\1\140\1\141"+
    "\2\13\1\140\2\13\1\142\1\143\1\144\3\13\1\143\3\13\1\32\2\1\1\13\1\1\5\13"+
    "\1\145\1\27\45\13\1\146\1\13\1\27\1\32\4\13\1\32\1\147\1\150\1\64\1\13\1\64"+
    "\1\13\1\64\1\150\1\75\3\13\1\151\1\1\1\152\1\120\2\1\1\120\5\13\1\31\2\13"+
    "\1\153\4\13\1\42\1\13\1\154\2\1\1\70\1\13\1\155\1\51\2\13\1\156\1\13\1\103"+
    "\1\120\2\1\1\13\1\116\3\13\1\51\2\1\2\120\1\157\5\1\1\113\2\13\1\151\1\160"+
    "\1\120\2\1\1\161\1\13\1\162\1\44\2\13\1\42\1\1\2\13\1\151\1\1\1\163\1\44\1"+
    "\13\1\155\6\1\1\164\1\165\14\13\4\1\21\13\1\145\2\13\1\145\1\166\1\13\1\155"+
    "\3\13\1\167\1\170\1\171\1\130\1\170\2\1\1\172\1\173\3\1\1\174\1\1\1\130\6"+
    "\1\1\175\1\176\1\177\1\200\1\201\3\1\1\202\1\203\1\204\1\205\1\206\1\207\2"+
    "\1\1\210\1\211\1\212\1\213\1\214\1\215\1\216\1\217\1\220\1\221\1\222\1\223"+
    "\1\224\3\1\1\225\10\1\1\226\1\227\40\1\1\230\41\1\1\231\1\232\1\233\40\1\1"+
    "\234\1\1\1\235\1\236\4\1\1\237\27\1\2\13\1\154\2\13\1\154\10\13\1\240\1\241"+
    "\2\13\1\136\3\13\1\242\1\1\1\13\1\116\4\243\4\1\1\111\35\1\1\244\2\1\1\245"+
    "\1\27\4\13\1\246\1\27\4\13\1\137\1\113\1\13\1\155\1\27\4\13\1\154\1\1\1\13"+
    "\1\32\3\1\1\13\40\1\133\13\1\42\4\1\135\13\1\42\2\1\10\13\1\130\4\1\2\13\1"+
    "\155\20\13\1\130\1\13\1\247\1\1\2\13\1\154\1\111\1\13\1\155\4\13\1\42\2\1"+
    "\1\250\1\251\5\13\1\252\1\13\1\155\1\31\3\1\1\250\1\253\1\13\1\33\1\1\3\13"+
    "\1\151\1\251\2\13\1\151\1\1\1\120\1\1\1\254\1\44\1\13\1\42\1\13\1\116\1\1"+
    "\1\13\1\130\1\52\2\13\1\33\1\111\1\120\1\255\1\256\2\13\1\50\1\1\1\257\1\120"+
    "\1\13\1\260\3\13\1\261\1\262\1\263\1\32\1\71\1\264\1\265\1\243\2\13\1\137"+
    "\1\42\7\13\1\33\1\120\72\13\1\151\1\13\1\266\2\13\1\156\120\1\26\13\1\155"+
    "\6\13\1\103\2\1\1\116\1\267\1\60\1\270\1\271\6\13\1\64\1\1\1\161\25\13\1\155"+
    "\1\1\4\13\1\251\2\13\1\31\2\1\1\156\7\1\1\255\7\13\1\130\1\1\1\120\1\27\1"+
    "\32\1\27\1\32\1\272\4\13\1\154\1\273\1\274\2\1\1\275\1\13\1\144\1\276\2\155"+
    "\2\1\7\13\1\32\30\1\1\13\1\130\3\13\1\75\2\1\2\13\1\1\1\13\1\277\2\13\1\42"+
    "\1\13\1\155\2\13\1\300\3\1\11\13\1\155\1\120\5\1\2\13\1\31\3\13\1\151\11\1"+
    "\23\13\1\116\1\13\1\42\1\31\11\1\1\301\2\13\1\302\1\13\1\42\1\13\1\116\1\13"+
    "\1\154\4\1\1\13\1\303\1\13\1\42\1\13\1\103\4\1\3\13\1\304\4\1\1\75\1\305\1"+
    "\13\1\151\2\1\1\13\1\130\1\13\1\130\2\1\1\127\1\13\1\51\1\1\3\13\1\42\1\13"+
    "\1\42\1\13\1\33\1\13\1\64\6\1\4\13\1\50\3\1\3\13\1\33\3\13\1\33\60\1\1\161"+
    "\2\13\1\31\2\1\1\70\1\1\1\161\2\13\2\1\1\13\1\50\1\120\1\161\1\13\1\116\1"+
    "\70\1\1\2\13\1\306\1\161\2\13\1\33\1\307\1\310\2\1\1\13\1\73\1\156\5\1\1\311"+
    "\1\312\1\50\2\13\1\154\1\1\1\120\1\77\1\57\1\60\1\74\1\1\1\313\1\64\21\1\3"+
    "\13\1\1\1\314\1\120\12\1\2\13\1\154\2\1\1\315\2\1\3\13\1\1\1\316\1\120\2\1"+
    "\2\13\1\32\1\1\1\120\3\1\1\13\1\103\1\1\1\120\26\1\4\13\1\120\1\111\34\1\3"+
    "\13\1\50\20\1\71\13\1\103\16\1\14\13\1\151\53\1\2\13\1\154\75\1\44\13\1\116"+
    "\33\1\43\13\1\50\1\13\1\154\1\120\6\1\1\13\1\155\1\1\3\13\1\1\1\151\1\120"+
    "\1\161\1\317\1\13\67\1\4\13\1\51\1\75\3\1\1\161\6\1\1\64\77\1\6\13\1\32\1"+
    "\130\1\50\1\103\66\1\5\13\1\255\3\13\1\150\1\320\1\321\1\322\3\13\1\323\1"+
    "\324\1\13\1\325\1\326\1\40\24\13\1\327\1\13\1\40\1\137\1\13\1\137\1\13\1\255"+
    "\1\13\1\255\1\154\1\13\1\154\1\13\1\60\1\13\1\60\1\13\1\330\3\331\14\13\1"+
    "\51\123\1\1\322\1\13\1\332\1\333\1\334\1\335\1\336\1\337\1\340\1\156\1\341"+
    "\1\156\24\1\55\13\1\116\2\1\103\13\1\51\15\13\1\155\150\13\1\64\25\1\41\13"+
    "\1\155\36\1");

  /* The ZZ_CMAP_A table has 3616 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\1\1\1\4\1\2\22\0\1\3\1\17\1\22\1\30\3\0\1\27\1\47\1\50\1\6\1"+
    "\17\1\54\1\17\1\31\1\5\1\13\10\25\1\12\1\51\1\53\1\20\1\21\1\20\2\0\2\7\1"+
    "\63\1\103\1\104\1\110\2\7\1\111\4\7\1\114\1\115\1\67\1\7\1\113\1\7\1\120\1"+
    "\24\1\121\1\122\3\7\1\41\1\23\1\42\1\0\1\10\1\0\1\64\1\61\1\74\1\71\1\72\1"+
    "\26\1\73\1\76\1\55\2\7\1\75\1\106\1\77\1\70\1\100\1\117\1\65\1\101\1\66\1"+
    "\107\1\102\1\116\1\105\1\62\1\112\1\43\1\46\1\44\1\17\6\0\1\1\24\0\1\7\1\0"+
    "\1\14\4\0\1\14\3\0\1\7\4\0\1\7\5\0\27\7\1\14\12\7\4\0\12\7\1\52\1\7\16\0\5"+
    "\7\7\0\1\7\1\0\1\7\1\0\5\15\1\14\2\15\2\14\4\15\1\14\1\15\6\14\1\15\1\14\3"+
    "\15\1\14\1\15\1\14\24\15\1\14\30\15\1\56\12\15\1\14\11\15\2\7\10\0\6\7\1\0"+
    "\26\7\2\0\1\7\6\0\10\7\10\0\13\7\5\0\3\7\15\0\12\11\4\0\6\7\1\0\1\7\17\0\2"+
    "\7\7\0\2\7\12\11\3\7\2\0\2\7\1\0\16\7\15\0\11\7\13\0\1\7\16\0\12\11\6\7\4"+
    "\0\2\7\4\0\1\7\5\0\6\7\4\0\1\7\11\0\1\7\3\0\1\7\7\0\11\7\7\0\5\7\17\0\26\7"+
    "\3\0\1\7\2\0\1\7\7\0\12\7\4\0\12\11\1\7\4\0\10\7\2\0\2\7\2\0\26\7\1\0\7\7"+
    "\1\0\1\7\3\0\4\7\3\0\1\7\20\0\1\7\15\0\2\7\1\0\3\7\23\0\6\7\4\0\2\7\1\0\2"+
    "\7\1\0\2\7\1\0\2\7\17\0\4\7\1\0\1\7\7\0\12\11\2\0\3\7\20\0\11\7\1\0\3\7\1"+
    "\0\16\7\1\0\2\7\1\0\5\7\3\0\1\7\2\0\1\7\30\0\1\7\13\0\10\7\2\0\1\7\3\0\1\7"+
    "\1\0\6\7\3\0\3\7\1\0\4\7\3\0\2\7\1\0\1\7\1\0\2\7\3\0\2\7\3\0\3\7\3\0\14\7"+
    "\13\0\10\7\1\0\2\7\10\0\3\7\5\0\4\7\1\0\5\7\3\0\1\7\3\0\2\7\15\0\13\7\2\0"+
    "\1\7\21\0\1\7\12\0\6\7\5\0\22\7\3\0\10\7\1\0\11\7\1\0\1\7\2\0\7\7\11\0\1\7"+
    "\1\0\2\7\14\0\12\11\7\0\2\7\1\0\1\7\2\0\2\7\1\0\1\7\2\0\1\7\6\0\4\7\1\0\7"+
    "\7\1\0\3\7\1\0\1\7\1\0\1\7\2\0\2\7\1\0\4\7\1\0\2\7\11\0\1\7\2\0\5\7\1\0\1"+
    "\7\11\0\12\11\2\0\14\7\1\0\24\7\13\0\5\7\3\0\6\7\4\0\4\7\3\0\1\7\3\0\2\7\7"+
    "\0\3\7\4\0\15\7\14\0\1\7\1\0\6\7\1\0\1\7\5\0\1\7\2\0\13\7\1\0\15\7\1\0\4\7"+
    "\2\0\7\7\1\0\1\7\1\0\4\7\2\0\1\7\1\0\4\7\2\0\7\7\1\0\1\7\1\0\4\7\2\0\17\7"+
    "\1\0\16\7\2\0\6\7\2\0\15\7\2\0\1\7\1\0\10\7\7\0\15\7\1\0\6\7\23\0\1\7\4\0"+
    "\1\7\3\0\11\7\1\0\1\7\5\0\17\7\1\0\16\7\2\0\14\7\13\0\1\7\15\0\7\7\7\0\16"+
    "\7\15\0\2\7\12\11\3\0\3\7\11\0\4\7\1\0\4\7\3\0\2\7\11\0\10\7\1\0\1\7\1\0\1"+
    "\7\1\0\1\7\1\0\6\7\1\0\7\7\1\0\1\7\3\0\3\7\1\0\7\7\3\0\4\7\2\0\6\7\14\0\2"+
    "\1\10\0\1\45\16\0\1\7\15\0\1\7\2\0\1\15\4\0\1\7\2\0\12\7\1\0\1\15\2\0\1\14"+
    "\1\7\1\15\2\7\1\15\6\0\1\15\1\0\1\7\1\0\1\7\1\0\4\7\1\0\13\7\2\0\4\7\5\0\5"+
    "\7\4\0\1\7\4\0\2\7\13\0\6\14\7\0\1\14\4\0\3\14\1\0\1\14\2\0\2\14\21\0\10\14"+
    "\10\0\1\14\3\0\6\14\12\0\1\60\2\0\1\57\4\0\2\14\4\0\4\14\1\0\1\14\4\0\2\14"+
    "\3\0\1\14\7\0\1\32\1\0\4\14\15\0\1\14\3\0\1\14\6\0\1\14\1\0\1\14\2\0\1\14"+
    "\4\0\1\14\2\0\1\14\13\0\1\16\3\0\2\14\2\0\2\14\4\0\2\14\6\0\2\14\10\0\2\14"+
    "\4\0\2\14\2\0\2\14\6\0\14\14\6\0\4\14\4\0\2\14\1\0\1\14\6\0\4\14\12\0\7\14"+
    "\1\0\3\14\15\0\1\35\1\36\23\0\1\37\2\0\1\40\22\0\1\14\21\0\3\14\20\0\1\33"+
    "\1\34\13\0\6\14\5\0\3\14\1\0\3\14\23\0\1\14\24\0\1\14\5\0\2\14\11\0\5\7\6"+
    "\0\4\7\3\0\2\7\14\0\10\7\7\0\10\7\1\0\7\7\6\0\2\7\12\0\5\7\5\0\2\7\3\0\7\7"+
    "\6\0\3\7\12\11\2\7\13\0\11\7\2\0\27\7\2\0\7\7\1\0\3\7\1\0\4\7\1\0\4\7\2\0"+
    "\6\7\3\0\1\7\1\0\1\7\2\0\5\7\1\0\12\7\12\11\5\7\1\0\3\7\1\0\10\7\4\0\7\7\3"+
    "\0\1\7\3\0\2\7\1\0\1\7\3\0\2\7\2\0\5\7\2\0\1\7\1\0\1\7\30\0\3\7\3\0\6\7\2"+
    "\0\6\7\2\0\6\7\11\0\7\7\4\0\5\7\3\0\5\7\5\0\1\7\1\0\10\7\1\0\5\7\1\0\1\7\1"+
    "\0\2\7\1\0\2\7\1\0\12\7\6\0\12\7\2\0\6\7\2\0\6\7\2\0\6\7\2\0\3\7\3\0\14\7"+
    "\1\0\16\7\1\0\2\7\1\0\2\7\1\0\10\7\6\0\4\7\4\0\16\7\2\0\1\7\1\0\14\7\1\0\2"+
    "\7\3\0\1\7\2\0\4\7\1\0\2\7\12\0\10\7\6\0\6\7\1\0\3\7\1\0\12\7\3\0\1\7\12\0"+
    "\4\7\13\0\12\11\1\7\1\0\1\7\3\0\7\7\1\0\1\7\1\0\4\7\1\0\17\7\1\0\2\7\14\0"+
    "\3\7\4\0\2\7\1\0\1\7\20\0\4\7\10\0\1\7\13\0\10\7\5\0\3\7\2\0\1\7\2\0\2\7\2"+
    "\0\4\7\1\0\14\7\1\0\1\7\1\0\7\7\1\0\21\7\1\0\4\7\2\0\10\7\1\0\7\7\1\0\13\7"+
    "\1\15\1\0\4\7\1\0\5\7\1\0\1\7\3\0\14\7\2\0\13\7\1\0\10\7\2\0\22\11\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\12\7\1\0\4\7\1\0\1\7\1\0\1\7\6\0\1\7\4\0\1\7\1\0\1\7"+
    "\1\0\1\7\1\0\3\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7\1"+
    "\0\2\7\1\0\1\7\2\0\4\7\1\0\7\7\1\0\4\7\1\0\4\7\1\0\1\7\1\0\12\7\1\0\5\7\1"+
    "\0\3\7\1\0\5\7\1\0\5\7");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\2\4\1\5\2\6\2\7"+
    "\1\10\1\4\1\11\1\5\1\1\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\5\1\37\1\40\1\41\30\5\1\42"+
    "\1\43\1\11\1\0\3\5\3\0\1\44\1\45\1\0"+
    "\1\46\1\47\1\50\1\5\1\51\1\52\11\5\1\53"+
    "\1\5\1\54\21\5\1\55\12\5\1\43\3\5\1\56"+
    "\1\57\1\1\1\60\2\0\1\61\23\5\1\62\12\5"+
    "\1\63\20\5\1\64\1\5\1\43\1\0\2\5\1\65"+
    "\1\66\1\0\13\5\1\67\1\70\1\71\4\5\1\72"+
    "\21\5\1\73\11\5\1\74\2\5\1\75\1\5\1\76"+
    "\53\5\1\77\1\100\6\5\1\101\5\5\1\102\12\5"+
    "\1\103\15\5\1\104\2\5\1\105\7\5\1\106\11\5"+
    "\1\107\11\5\1\110\3\5\1\111\1\112\10\5\1\113"+
    "\5\5\1\114\1\115\1\116\1\117\3\5\1\120\2\5"+
    "\1\121\3\5\1\122\5\5\1\123\1\5\1\124\6\5"+
    "\1\125\1\5\1\126\1\127\1\130\1\131\1\5\1\132"+
    "\4\5\1\133\2\5\1\134\1\5\1\135\2\5\1\136"+
    "\1\137\3\5\1\140\1\141\3\5\1\63\6\5\1\142"+
    "\1\5\1\143\1\144\1\145\1\146\1\147\1\150\6\5"+
    "\1\151\1\152\1\153";

  private static int [] zzUnpackAction() {
    int [] result = new int[460];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\123\0\246\0\123\0\246\0\371\0\123\0\u014c"+
    "\0\u019f\0\123\0\123\0\u014c\0\123\0\u01f2\0\u0245\0\u0298"+
    "\0\u02eb\0\123\0\u033e\0\123\0\123\0\123\0\123\0\123"+
    "\0\123\0\123\0\123\0\123\0\u0391\0\u03e4\0\123\0\123"+
    "\0\u0437\0\123\0\u048a\0\u014c\0\123\0\123\0\u04dd\0\u014c"+
    "\0\123\0\123\0\u0530\0\u0583\0\u05d6\0\u0629\0\u067c\0\u06cf"+
    "\0\u0722\0\u0775\0\u07c8\0\u081b\0\u086e\0\u08c1\0\u0914\0\u0967"+
    "\0\u09ba\0\u0a0d\0\u0a60\0\u0ab3\0\u0b06\0\u0b59\0\u0bac\0\u0bff"+
    "\0\u0c52\0\u0ca5\0\u0cf8\0\u0d4b\0\123\0\u0d9e\0\u0df1\0\u0e44"+
    "\0\u0e97\0\u0eea\0\u0f3d\0\u0f90\0\123\0\123\0\u0fe3\0\u1036"+
    "\0\123\0\u014c\0\u1089\0\u014c\0\u014c\0\u10dc\0\u112f\0\u1182"+
    "\0\u11d5\0\u1228\0\u127b\0\u12ce\0\u1321\0\u1374\0\u014c\0\u13c7"+
    "\0\u014c\0\u141a\0\u146d\0\u14c0\0\u1513\0\u1566\0\u15b9\0\u160c"+
    "\0\u165f\0\u16b2\0\u1705\0\u1758\0\u17ab\0\u17fe\0\u1851\0\u18a4"+
    "\0\u18f7\0\u194a\0\u014c\0\u199d\0\u19f0\0\u1a43\0\u1a96\0\u1ae9"+
    "\0\u1b3c\0\u1b8f\0\u1be2\0\u1c35\0\u1c88\0\u1cdb\0\u1d2e\0\u1d81"+
    "\0\u1dd4\0\u014c\0\123\0\u0eea\0\123\0\u1e27\0\u1e7a\0\123"+
    "\0\u1ecd\0\u1f20\0\u1f73\0\u1fc6\0\u2019\0\u206c\0\u20bf\0\u2112"+
    "\0\u2165\0\u21b8\0\u220b\0\u225e\0\u22b1\0\u2304\0\u2357\0\u23aa"+
    "\0\u23fd\0\u2450\0\u24a3\0\u014c\0\u24f6\0\u2549\0\u259c\0\u25ef"+
    "\0\u2642\0\u2695\0\u26e8\0\u273b\0\u278e\0\u27e1\0\u2834\0\u2887"+
    "\0\u28da\0\u292d\0\u2980\0\u29d3\0\u2a26\0\u2a79\0\u2acc\0\u2b1f"+
    "\0\u2b72\0\u2bc5\0\u2c18\0\u2c6b\0\u2cbe\0\u2d11\0\u2d64\0\u014c"+
    "\0\u2db7\0\123\0\u1cdb\0\u2e0a\0\u2e5d\0\u014c\0\123\0\u2eb0"+
    "\0\u2f03\0\u2f56\0\u2fa9\0\u2ffc\0\u304f\0\u30a2\0\u30f5\0\u3148"+
    "\0\u319b\0\u31ee\0\u3241\0\u014c\0\u014c\0\u014c\0\u3294\0\u32e7"+
    "\0\u333a\0\u338d\0\u014c\0\u33e0\0\u3433\0\u3486\0\u34d9\0\u352c"+
    "\0\u357f\0\u35d2\0\u3625\0\u3678\0\u36cb\0\u371e\0\u3771\0\u37c4"+
    "\0\u3817\0\u386a\0\u38bd\0\u3910\0\u014c\0\u3963\0\u39b6\0\u3a09"+
    "\0\u3a5c\0\u3aaf\0\u3b02\0\u3b55\0\u3ba8\0\u3bfb\0\u014c\0\u3c4e"+
    "\0\u3ca1\0\u014c\0\u3cf4\0\123\0\u3d47\0\u3d9a\0\u3ded\0\u3e40"+
    "\0\u3e93\0\u3ee6\0\u3f39\0\u3f8c\0\u3fdf\0\u4032\0\u4085\0\u40d8"+
    "\0\u412b\0\u417e\0\u41d1\0\u4224\0\u4277\0\u42ca\0\u431d\0\u4370"+
    "\0\u43c3\0\u4416\0\u4469\0\u44bc\0\u450f\0\u4562\0\u45b5\0\u4608"+
    "\0\u465b\0\u46ae\0\u4701\0\u4754\0\u47a7\0\u47fa\0\u484d\0\u48a0"+
    "\0\u48f3\0\u4946\0\u4999\0\u49ec\0\u4a3f\0\u4a92\0\u4ae5\0\u014c"+
    "\0\u014c\0\u4b38\0\u4b8b\0\u4bde\0\u4c31\0\u4c84\0\u4cd7\0\u014c"+
    "\0\u4d2a\0\u4d7d\0\u4dd0\0\u4e23\0\u4e76\0\u014c\0\u4ec9\0\u4f1c"+
    "\0\u4f6f\0\u4fc2\0\u5015\0\u5068\0\u50bb\0\u510e\0\u5161\0\u51b4"+
    "\0\u014c\0\u5207\0\u525a\0\u52ad\0\u5300\0\u5353\0\u53a6\0\u53f9"+
    "\0\u544c\0\u549f\0\u54f2\0\u5545\0\u5598\0\u55eb\0\u014c\0\u563e"+
    "\0\u5691\0\u014c\0\u56e4\0\u5737\0\u578a\0\u57dd\0\u5830\0\u5883"+
    "\0\u58d6\0\u014c\0\u5929\0\u597c\0\u59cf\0\u5a22\0\u5a75\0\u5ac8"+
    "\0\u5b1b\0\u5b6e\0\u5bc1\0\u014c\0\u5c14\0\u5c67\0\u5cba\0\u5d0d"+
    "\0\u5d60\0\u5db3\0\u5e06\0\u5e59\0\u5eac\0\u014c\0\u5eff\0\u5f52"+
    "\0\u5fa5\0\u014c\0\u014c\0\u5ff8\0\u604b\0\u609e\0\u60f1\0\u6144"+
    "\0\u6197\0\u61ea\0\u623d\0\u014c\0\u6290\0\u62e3\0\u6336\0\u6389"+
    "\0\u63dc\0\u014c\0\u014c\0\u014c\0\u014c\0\u642f\0\u6482\0\u64d5"+
    "\0\u014c\0\u6528\0\u657b\0\u014c\0\u65ce\0\u6621\0\u6674\0\u014c"+
    "\0\u66c7\0\u671a\0\u676d\0\u67c0\0\u6813\0\u014c\0\u6866\0\u014c"+
    "\0\u68b9\0\u690c\0\u695f\0\u69b2\0\u6a05\0\u6a58\0\u014c\0\u6aab"+
    "\0\u014c\0\u014c\0\u014c\0\u014c\0\u6afe\0\u014c\0\u6b51\0\u6ba4"+
    "\0\u6bf7\0\u6c4a\0\u014c\0\u6c9d\0\u6cf0\0\u014c\0\u6d43\0\u014c"+
    "\0\u6d96\0\u6de9\0\u014c\0\u014c\0\u6e3c\0\u6e8f\0\u6ee2\0\u014c"+
    "\0\u014c\0\u6f35\0\u6f88\0\u6fdb\0\u014c\0\u702e\0\u7081\0\u70d4"+
    "\0\u7127\0\u717a\0\u71cd\0\u014c\0\u7220\0\u014c\0\u014c\0\u014c"+
    "\0\u014c\0\u014c\0\u014c\0\u7273\0\u72c6\0\u7319\0\u736c\0\u73bf"+
    "\0\u7412\0\u014c\0\u014c\0\u014c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[460];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\2\10\1\2"+
    "\1\11\1\12\1\13\1\14\1\15\1\7\1\16\1\7"+
    "\1\17\1\2\1\10\1\11\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\10\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\10\1\64\3\10\1\65\2\10\1\66\1\67"+
    "\1\10\1\70\1\71\1\72\1\73\1\10\1\74\1\75"+
    "\1\76\1\77\1\10\1\100\1\101\1\102\124\0\2\3"+
    "\1\0\1\3\123\0\1\103\1\104\12\0\1\7\110\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\42\10\12\0\2\11\11\0\1\11\116\0"+
    "\1\7\101\0\2\17\1\0\17\17\1\105\1\106\77\17"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\23\0\1\10"+
    "\2\0\2\10\2\0\3\10\1\107\1\110\2\10\1\111"+
    "\32\10\23\112\1\113\77\112\31\0\1\114\134\0\1\115"+
    "\123\0\1\116\133\0\1\117\66\0\1\120\27\0\1\121"+
    "\60\0\5\10\1\0\1\10\6\0\2\10\1\122\23\0"+
    "\1\10\2\0\2\10\2\0\16\10\1\123\1\10\1\124"+
    "\21\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\2\10\2\0\1\10\1\125\40\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\3\10\1\126\3\10\1\127\5\10\1\130"+
    "\24\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\2\10\2\0\14\10\1\131\25\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\11\10\1\132\30\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\1\10\1\133\2\10\1\134\10\10\1\135\24\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\4\10\1\136\35\10\7\0\5\10\1\0"+
    "\1\10\6\0\2\10\1\137\23\0\1\10\2\0\2\10"+
    "\2\0\5\10\1\140\34\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\23\0\1\10\2\0\2\10\2\0\7\10"+
    "\1\141\1\10\1\142\30\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\23\0\1\10\2\0\2\10\2\0\14\10"+
    "\1\143\1\10\1\144\2\10\1\145\2\10\1\146\15\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\23\0\1\10"+
    "\2\0\2\10\2\0\7\10\1\147\4\10\1\150\1\151"+
    "\24\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\2\10\2\0\4\10\1\152\35\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\11\10\1\153\30\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\16\10\1\154\5\10\1\155\15\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\3\10\1\156\3\10\1\157\32\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\17\10\1\160\1\161\21\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\23\0\1\10\2\0\2\10\2\0\3\10"+
    "\1\162\36\10\7\0\5\10\1\0\1\10\6\0\2\10"+
    "\1\163\23\0\1\10\2\0\2\10\2\0\16\10\1\164"+
    "\6\10\1\165\14\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\2\10\2\0\11\10\1\166"+
    "\30\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\2\10\2\0\7\10\1\167\32\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\17\10\1\170\22\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\15\10\1\171\24\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\2\10\2\0\1\10\1\172"+
    "\13\10\1\173\24\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\2\10\2\0\3\10\1\174"+
    "\36\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\2\10\2\0\15\10\1\175\24\10\2\103"+
    "\1\0\120\103\6\104\1\176\114\104\13\0\1\17\6\0"+
    "\5\17\32\0\1\17\2\0\3\17\10\0\1\17\2\0"+
    "\1\17\2\0\1\17\1\0\1\17\22\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\14\10\1\177\10\10\1\200\14\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\7\10\1\201\32\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\2\10\2\0\4\10\1\202"+
    "\35\10\27\0\1\203\116\0\1\112\2\0\1\112\1\204"+
    "\31\0\1\112\2\0\3\112\10\0\1\112\2\0\1\112"+
    "\51\0\1\205\122\0\1\206\23\0\1\207\116\0\1\210"+
    "\60\0\5\10\1\0\1\10\6\0\3\10\23\0\1\10"+
    "\2\0\1\211\1\10\2\0\42\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\4\10\1\212\1\213\34\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\23\0\1\10\2\0\2\10\2\0\4\10"+
    "\1\214\11\10\1\215\23\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\23\0\1\10\2\0\2\10\2\0\3\10"+
    "\1\216\36\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\23\0\1\10\2\0\2\10\2\0\5\10\1\217\34\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\23\0\1\10"+
    "\2\0\2\10\2\0\3\10\1\220\13\10\1\221\1\222"+
    "\15\10\1\223\3\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\2\10\2\0\17\10\1\224"+
    "\22\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\2\10\2\0\26\10\1\225\13\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\11\10\1\226\30\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\7\10\1\227\1\10\1\230\30\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\15\10\1\231\24\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\2\10\2\0\13\10\1\232"+
    "\26\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\2\10\2\0\20\10\1\233\21\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\10\10\1\234\4\10\1\235\2\10\1\236"+
    "\21\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\2\10\2\0\3\10\1\237\36\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\5\10\1\240\3\10\1\241\30\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\4\10\1\242\11\10\1\243\23\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\11\10\1\244\30\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\3\10\1\245\36\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\2\10\2\0\11\10\1\246"+
    "\30\10\7\0\5\10\1\0\1\10\6\0\2\10\1\247"+
    "\23\0\1\10\2\0\2\10\2\0\42\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\23\0\1\10\2\0\2\10"+
    "\2\0\15\10\1\250\24\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\23\0\1\10\2\0\2\10\2\0\5\10"+
    "\1\251\34\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\23\0\1\10\2\0\1\252\1\10\2\0\42\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\10\10\1\253\31\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\10\10\1\254\31\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\2\10\2\0\11\10\1\255"+
    "\30\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\2\10\2\0\13\10\1\256\26\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\10\10\1\257\31\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\17\10\1\260\22\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\2\10\2\0\3\10\1\261"+
    "\7\10\1\262\26\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\2\10\2\0\5\10\1\263"+
    "\34\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\2\10\2\0\11\10\1\264\30\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\1\265\1\10\2\0\42\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\23\0\1\10\2\0\2\10\2\0\17\10"+
    "\1\266\22\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\23\0\1\10\2\0\2\10\2\0\11\10\1\267\30\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\23\0\1\10"+
    "\2\0\2\10\2\0\4\10\1\270\35\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\23\0\1\10\2\0\1\271"+
    "\1\10\2\0\42\10\5\104\1\272\1\273\114\104\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\20\10\1\274\21\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\1\275\1\10"+
    "\2\0\42\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\23\0\1\10\2\0\2\10\2\0\25\10\1\276\14\10"+
    "\50\0\1\277\103\0\1\300\100\0\5\10\1\0\1\10"+
    "\6\0\3\10\23\0\1\10\2\0\2\10\2\0\5\10"+
    "\1\301\34\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\23\0\1\10\2\0\2\10\2\0\5\10\1\302\34\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\23\0\1\10"+
    "\2\0\2\10\2\0\11\10\1\303\30\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\23\0\1\10\2\0\2\10"+
    "\2\0\7\10\1\304\32\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\23\0\1\10\2\0\2\10\2\0\13\10"+
    "\1\305\26\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\23\0\1\10\2\0\1\306\1\10\2\0\42\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\11\10\1\307\30\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\14\10\1\310\25\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\2\10\2\0\14\10\1\311"+
    "\25\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\2\10\2\0\5\10\1\312\34\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\26\10\1\313\13\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\11\10\1\314\30\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\2\10\2\0\11\10\1\315"+
    "\30\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\2\10\2\0\16\10\1\316\23\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\13\10\1\317\26\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\13\10\1\320\26\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\2\10\2\0\11\10\1\321"+
    "\30\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\2\10\2\0\4\10\1\322\35\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\11\10\1\323\30\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\3\10\1\324\36\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\2\10\2\0\26\10\1\325"+
    "\13\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\2\10\2\0\14\10\1\326\25\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\11\10\1\327\30\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\25\10\1\330\14\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\2\10\2\0\4\10\1\331"+
    "\35\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\2\10\2\0\20\10\1\332\1\333\20\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\23\0\1\10"+
    "\2\0\2\10\2\0\3\10\1\334\36\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\23\0\1\10\2\0\2\10"+
    "\2\0\16\10\1\335\23\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\23\0\1\10\2\0\2\10\2\0\20\10"+
    "\1\336\21\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\23\0\1\10\2\0\1\337\1\10\2\0\42\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\3\10\1\340\36\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\11\10\1\341\30\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\2\10\2\0\16\10\1\342"+
    "\23\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\2\10\2\0\11\10\1\343\30\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\3\10\1\344\36\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\20\10\1\345\21\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\1\346\1\10\2\0\42\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\23\0\1\10"+
    "\2\0\2\10\2\0\26\10\1\347\13\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\23\0\1\10\2\0\2\10"+
    "\2\0\14\10\1\350\25\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\23\0\1\10\2\0\2\10\2\0\14\10"+
    "\1\351\25\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\23\0\1\10\2\0\2\10\2\0\7\10\1\352\16\10"+
    "\1\353\13\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\23\0\1\10\2\0\1\354\1\10\2\0\42\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\4\10\1\355\35\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\13\10\1\356\26\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\2\10\2\0\11\10\1\357"+
    "\30\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\2\10\2\0\7\10\1\360\32\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\14\10\1\361\25\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\11\10\1\362\30\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\2\10\2\0\14\10\1\363"+
    "\25\10\50\0\1\364\61\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\1\365\1\10\2\0\42\10"+
    "\7\0\1\10\1\366\3\10\1\0\1\10\6\0\3\10"+
    "\23\0\1\10\2\0\2\10\2\0\42\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\23\0\1\10\2\0\2\10"+
    "\2\0\12\10\1\367\27\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\23\0\1\10\2\0\2\10\2\0\14\10"+
    "\1\370\25\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\23\0\1\10\2\0\2\10\2\0\11\10\1\371\30\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\23\0\1\10"+
    "\2\0\2\10\2\0\16\10\1\372\23\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\23\0\1\10\2\0\2\10"+
    "\2\0\4\10\1\373\35\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\23\0\1\10\2\0\1\374\1\10\2\0"+
    "\42\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\2\10\2\0\3\10\1\375\36\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\7\10\1\376\32\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\1\377\1\10"+
    "\2\0\42\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\23\0\1\10\2\0\2\10\2\0\11\10\1\u0100\30\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\23\0\1\10"+
    "\2\0\1\u0101\1\10\2\0\42\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\4\10\1\u0102\35\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\2\10\2\0\11\10\1\u0103"+
    "\30\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\2\10\2\0\16\10\1\u0104\23\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\4\10\1\u0105\35\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\26\10\1\u0106\13\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\2\10\2\0\4\10\1\u0107"+
    "\35\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\2\10\2\0\17\10\1\u0108\22\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\11\10\1\u0109\30\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\5\10\1\u010a\34\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\2\10\2\0\11\10\1\u010b"+
    "\30\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\2\10\2\0\4\10\1\u010c\35\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\12\10\1\u010d\27\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\11\10\1\u010e\30\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\2\10\2\0\16\10\1\u010f"+
    "\23\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\2\10\2\0\16\10\1\u0110\23\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\16\10\1\u0111\23\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\5\10\1\u0112\34\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\2\10\2\0\14\10\1\u0113"+
    "\25\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\2\10\2\0\5\10\1\u0114\34\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\14\10\1\u0115\25\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\13\10\1\u0116\26\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\1\u0117\1\10\2\0\42\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\23\0\1\10"+
    "\2\0\1\u0118\1\10\2\0\42\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\4\10\1\u0119\5\10\1\u011a\27\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\4\10\1\u011b\35\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\2\10\2\0\13\10\1\u011c"+
    "\26\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\2\10\2\0\3\10\1\u011d\36\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\15\10\1\u011e\24\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\4\10\1\u011f\35\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\2\10\2\0\11\10\1\u0120"+
    "\30\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\2\10\2\0\1\10\1\u0121\40\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\3\10\1\u0122\36\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\6\10\1\u0123\33\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\2\10\2\0\7\10\1\u0124"+
    "\32\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\2\10\2\0\14\10\1\u0125\25\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\17\10\1\u0126\22\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\3\10\1\u0127\36\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\2\10\2\0\20\10\1\u0128"+
    "\21\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\2\10\2\0\31\10\1\u0129\10\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\13\10\1\u012a\26\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\4\10\1\u012b\35\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\2\10\2\0\4\10\1\u012c"+
    "\35\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\2\10\2\0\10\10\1\u012d\31\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\20\10\1\u012e\21\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\35\10\1\u012f\4\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\2\10\2\0\3\10\1\u0130"+
    "\36\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\2\10\2\0\13\10\1\u0131\26\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\11\10\1\u0132\30\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\3\10\1\u0133\36\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\2\10\2\0\16\10\1\u0134"+
    "\23\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\2\10\2\0\14\10\1\u0135\25\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\20\10\1\u0136\21\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\4\10\1\u0137\35\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\2\10\2\0\16\10\1\u0138"+
    "\23\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\2\10\2\0\20\10\1\u0139\21\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\1\u013a\1\10\2\0\42\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\23\0\1\10\2\0\2\10\2\0\4\10"+
    "\1\u013b\35\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\23\0\1\10\2\0\1\u013c\1\10\2\0\11\10\1\u013d"+
    "\30\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\2\10\2\0\13\10\1\u013e\26\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\20\10\1\u013f\21\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\3\10\1\u0140\36\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\2\10\2\0\11\10\1\u0141"+
    "\30\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\2\10\2\0\11\10\1\u0142\30\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\1\u0143\1\10\2\0\42\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\23\0\1\10\2\0\2\10\2\0\5\10"+
    "\1\u0144\34\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\23\0\1\10\2\0\2\10\2\0\13\10\1\u0145\26\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\23\0\1\10"+
    "\2\0\2\10\2\0\31\10\1\u0146\10\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\23\0\1\10\2\0\2\10"+
    "\2\0\10\10\1\u0147\31\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\23\0\1\10\2\0\2\10\2\0\16\10"+
    "\1\u0148\23\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\23\0\1\10\2\0\2\10\2\0\20\10\1\u0149\21\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\23\0\1\10"+
    "\2\0\2\10\2\0\11\10\1\u014a\30\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\23\0\1\10\2\0\2\10"+
    "\2\0\5\10\1\u014b\34\10\7\0\1\10\1\u014c\3\10"+
    "\1\0\1\10\6\0\3\10\23\0\1\10\2\0\2\10"+
    "\2\0\42\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\23\0\1\10\2\0\2\10\2\0\11\10\1\u014d\30\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\23\0\1\10"+
    "\2\0\2\10\2\0\14\10\1\u014e\25\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\23\0\1\10\2\0\2\10"+
    "\2\0\4\10\1\u014f\35\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\23\0\1\10\2\0\2\10\2\0\4\10"+
    "\1\u0150\35\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\23\0\1\10\2\0\2\10\2\0\3\10\1\u0151\36\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\23\0\1\10"+
    "\2\0\2\10\2\0\5\10\1\u0152\34\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\23\0\1\10\2\0\2\10"+
    "\2\0\1\u0153\41\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\2\10\2\0\11\10\1\u0154"+
    "\30\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\2\10\2\0\11\10\1\u0155\30\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\11\10\1\u0156\30\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\11\10\1\u0157\30\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\2\10\2\0\26\10\1\u0158"+
    "\13\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\1\u0159\1\10\2\0\42\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\23\0\1\10\2\0\2\10"+
    "\2\0\20\10\1\u015a\21\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\23\0\1\10\2\0\2\10\2\0\11\10"+
    "\1\u015b\30\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\23\0\1\10\2\0\2\10\2\0\20\10\1\u015c\21\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\23\0\1\10"+
    "\2\0\2\10\2\0\5\10\1\u015d\34\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\23\0\1\10\2\0\2\10"+
    "\2\0\3\10\1\u015e\36\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\23\0\1\10\2\0\2\10\2\0\3\10"+
    "\1\u015f\36\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\23\0\1\10\2\0\2\10\2\0\17\10\1\u0160\22\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\23\0\1\10"+
    "\2\0\2\10\2\0\3\10\1\u0161\36\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\23\0\1\10\2\0\2\10"+
    "\2\0\5\10\1\u0162\34\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\23\0\1\10\2\0\2\10\2\0\16\10"+
    "\1\u0163\23\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\23\0\1\10\2\0\2\10\2\0\21\10\1\u0164\20\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\23\0\1\10"+
    "\2\0\2\10\2\0\5\10\1\u0165\34\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\23\0\1\10\2\0\2\10"+
    "\2\0\20\10\1\u0166\21\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\23\0\1\10\2\0\2\10\2\0\11\10"+
    "\1\u0167\30\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\23\0\1\10\2\0\1\u0168\1\10\2\0\42\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\1\u0169\1\10\2\0\42\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\23\0\1\10\2\0\2\10\2\0\10\10"+
    "\1\u016a\31\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\23\0\1\10\2\0\2\10\2\0\20\10\1\u016b\21\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\23\0\1\10"+
    "\2\0\2\10\2\0\5\10\1\u016c\34\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\23\0\1\10\2\0\1\u016d"+
    "\1\10\2\0\42\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\1\u016e\1\10\2\0\42\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\23\0\1\10"+
    "\2\0\2\10\2\0\3\10\1\u016f\36\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\23\0\1\10\2\0\1\u0170"+
    "\1\10\2\0\42\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\1\u0171\1\10\2\0\42\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\23\0\1\10"+
    "\2\0\1\u0172\1\10\2\0\42\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\11\10\1\u0173\30\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\2\10\2\0\25\10\1\u0174"+
    "\14\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\1\u0175\1\10\2\0\42\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\23\0\1\10\2\0\2\10"+
    "\2\0\7\10\1\u0176\32\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\23\0\1\10\2\0\1\u0177\1\10\2\0"+
    "\42\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\2\10\2\0\4\10\1\u0178\35\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\14\10\1\u0179\25\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\10\10\1\u017a\31\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\2\10\2\0\20\10\1\u017b"+
    "\21\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\2\10\2\0\20\10\1\u017c\21\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\20\10\1\u017d\21\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\4\10\1\u017e\35\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\2\10\2\0\20\10\1\u017f"+
    "\21\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\1\u0180\1\10\2\0\42\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\23\0\1\10\2\0\2\10"+
    "\2\0\10\10\1\u0181\31\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\23\0\1\10\2\0\2\10\2\0\11\10"+
    "\1\u0182\30\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\23\0\1\10\2\0\2\10\2\0\14\10\1\u0183\25\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\23\0\1\10"+
    "\2\0\2\10\2\0\4\10\1\u0184\35\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\23\0\1\10\2\0\2\10"+
    "\2\0\7\10\1\u0185\32\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\23\0\1\10\2\0\1\u0186\1\10\2\0"+
    "\42\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\1\u0187\1\10\2\0\42\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\23\0\1\10\2\0\2\10"+
    "\2\0\12\10\1\u0188\27\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\23\0\1\10\2\0\2\10\2\0\11\10"+
    "\1\u0189\30\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\23\0\1\10\2\0\1\u018a\1\10\2\0\42\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\25\10\1\u018b\14\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\7\10\1\u018c\32\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\2\10\2\0\16\10\1\u018d"+
    "\23\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\2\10\2\0\1\10\1\u018e\40\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\21\10\1\u018f\20\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\5\10\1\u0190\34\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\2\10\2\0\5\10\1\u0191"+
    "\34\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\2\10\2\0\5\10\1\u0192\34\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\21\10\1\u0193\20\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\7\10\1\u0194\32\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\2\10\2\0\16\10\1\u0195"+
    "\23\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\2\10\2\0\31\10\1\u0196\10\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\10\10\1\u0197\31\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\13\10\1\u0198\26\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\2\10\2\0\1\10\1\u0199"+
    "\40\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\2\10\2\0\11\10\1\u019a\30\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\11\10\1\u019b\30\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\11\10\1\u019c\30\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\2\10\2\0\16\10\1\u019d"+
    "\23\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\2\10\2\0\20\10\1\u019e\21\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\14\10\1\u019f\25\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\16\10\1\u01a0\23\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\2\10\2\0\16\10\1\u01a1"+
    "\23\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\2\10\2\0\7\10\1\u01a2\32\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\2\10\2\0\20\10\1\u01a3\21\10\7\0\5\10\1\0"+
    "\1\10\6\0\3\10\23\0\1\10\2\0\2\10\2\0"+
    "\7\10\1\u01a4\32\10\7\0\5\10\1\0\1\10\6\0"+
    "\3\10\23\0\1\10\2\0\2\10\2\0\11\10\1\u01a5"+
    "\30\10\7\0\5\10\1\0\1\10\6\0\3\10\23\0"+
    "\1\10\2\0\2\10\2\0\16\10\1\u01a6\23\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\1\u01a7\1\10\2\0\42\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\23\0\1\10\2\0\2\10\2\0\11\10"+
    "\1\u01a8\30\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\23\0\1\10\2\0\1\u01a9\1\10\2\0\42\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\1\u01aa\1\10\2\0\42\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\23\0\1\10\2\0\2\10\2\0\11\10"+
    "\1\u01ab\30\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\23\0\1\10\2\0\2\10\2\0\16\10\1\u01ac\23\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\23\0\1\10"+
    "\2\0\2\10\2\0\5\10\1\u01ad\34\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\23\0\1\10\2\0\2\10"+
    "\2\0\3\10\1\u01ae\36\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\23\0\1\10\2\0\2\10\2\0\3\10"+
    "\1\u01af\36\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\23\0\1\10\2\0\2\10\2\0\12\10\1\u01b0\27\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\23\0\1\10"+
    "\2\0\2\10\2\0\1\10\1\u01b1\40\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\23\0\1\10\2\0\2\10"+
    "\2\0\10\10\1\u01b2\31\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\23\0\1\10\2\0\2\10\2\0\5\10"+
    "\1\u01b3\34\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\23\0\1\10\2\0\2\10\2\0\16\10\1\u01b4\23\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\23\0\1\10"+
    "\2\0\2\10\2\0\16\10\1\u01b5\23\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\23\0\1\10\2\0\2\10"+
    "\2\0\16\10\1\u01b6\23\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\23\0\1\10\2\0\2\10\2\0\16\10"+
    "\1\u01b7\23\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\23\0\1\10\2\0\2\10\2\0\7\10\1\u01b8\32\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\23\0\1\10"+
    "\2\0\2\10\2\0\7\10\1\u01b9\32\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\23\0\1\10\2\0\2\10"+
    "\2\0\3\10\1\u01ba\36\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\23\0\1\10\2\0\2\10\2\0\5\10"+
    "\1\u01bb\34\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\23\0\1\10\2\0\2\10\2\0\14\10\1\u01bc\25\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\23\0\1\10"+
    "\2\0\2\10\2\0\11\10\1\u01bd\30\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\23\0\1\10\2\0\2\10"+
    "\2\0\20\10\1\u01be\21\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\23\0\1\10\2\0\2\10\2\0\20\10"+
    "\1\u01bf\21\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\23\0\1\10\2\0\2\10\2\0\5\10\1\u01c0\34\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\23\0\1\10"+
    "\2\0\2\10\2\0\12\10\1\u01c1\27\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\23\0\1\10\2\0\2\10"+
    "\2\0\16\10\1\u01c2\23\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\23\0\1\10\2\0\2\10\2\0\16\10"+
    "\1\u01c3\23\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\23\0\1\10\2\0\1\u01c4\1\10\2\0\42\10\7\0"+
    "\5\10\1\0\1\10\6\0\3\10\23\0\1\10\2\0"+
    "\1\u01c5\1\10\2\0\42\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\23\0\1\10\2\0\2\10\2\0\16\10"+
    "\1\u01c6\23\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\23\0\1\10\2\0\2\10\2\0\14\10\1\u01c7\25\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\23\0\1\10"+
    "\2\0\2\10\2\0\7\10\1\u01c8\32\10\7\0\5\10"+
    "\1\0\1\10\6\0\3\10\23\0\1\10\2\0\2\10"+
    "\2\0\13\10\1\u01c9\26\10\7\0\5\10\1\0\1\10"+
    "\6\0\3\10\23\0\1\10\2\0\2\10\2\0\20\10"+
    "\1\u01ca\21\10\7\0\5\10\1\0\1\10\6\0\3\10"+
    "\23\0\1\10\2\0\2\10\2\0\16\10\1\u01cb\23\10"+
    "\7\0\5\10\1\0\1\10\6\0\3\10\23\0\1\10"+
    "\2\0\2\10\2\0\11\10\1\u01cc\30\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[29797];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\2\1\1\11\2\1\2\11"+
    "\1\1\1\11\4\1\1\11\1\1\11\11\2\1\2\11"+
    "\1\1\1\11\2\1\2\11\2\1\2\11\32\1\1\11"+
    "\1\0\3\1\3\0\2\11\1\0\1\1\1\11\61\1"+
    "\1\11\1\1\1\11\2\0\1\11\61\1\1\11\1\0"+
    "\3\1\1\11\1\0\63\1\1\11\330\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[460];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _ResLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _ResLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 108: break;
          case 2: 
            { return NLS;
            }
          case 109: break;
          case 3: 
            { return WS;
            }
          case 110: break;
          case 4: 
            { return SYMBOL;
            }
          case 111: break;
          case 5: 
            { return IDENTIFIER;
            }
          case 112: break;
          case 6: 
            { return INT;
            }
          case 113: break;
          case 7: 
            { return MATHSYMBOL;
            }
          case 114: break;
          case 8: 
            { return TRI_EQUALS;
            }
          case 115: break;
          case 9: 
            { return STRING;
            }
          case 116: break;
          case 10: 
            { return POUND;
            }
          case 117: break;
          case 11: 
            { return DOT;
            }
          case 118: break;
          case 12: 
            { return DBL_BAR;
            }
          case 119: break;
          case 13: 
            { return LANGLE;
            }
          case 120: break;
          case 14: 
            { return RANGLE;
            }
          case 121: break;
          case 15: 
            { return LCEIL;
            }
          case 122: break;
          case 16: 
            { return RCEIL;
            }
          case 123: break;
          case 17: 
            { return LCUP;
            }
          case 124: break;
          case 18: 
            { return RCUP;
            }
          case 125: break;
          case 19: 
            { return LBRACK;
            }
          case 126: break;
          case 20: 
            { return RBRACK;
            }
          case 127: break;
          case 21: 
            { return LBRACE;
            }
          case 128: break;
          case 22: 
            { return RBRACE;
            }
          case 129: break;
          case 23: 
            { return PRIME;
            }
          case 130: break;
          case 24: 
            { return BAR;
            }
          case 131: break;
          case 25: 
            { return LPAREN;
            }
          case 132: break;
          case 26: 
            { return RPAREN;
            }
          case 133: break;
          case 27: 
            { return COLON;
            }
          case 134: break;
          case 28: 
            { return TRICOLON;
            }
          case 135: break;
          case 29: 
            { return SEMICOLON;
            }
          case 136: break;
          case 30: 
            { return COMMA;
            }
          case 137: break;
          case 31: 
            { return LAMBDA;
            }
          case 138: break;
          case 32: 
            { return EXISTS;
            }
          case 139: break;
          case 33: 
            { return FORALL;
            }
          case 140: break;
          case 34: 
            { return LINE_COMMENT;
            }
          case 141: break;
          case 35: 
            { return MULTILINE_COMMENT;
            }
          case 142: break;
          case 36: 
            { return DBL_LBRACE;
            }
          case 143: break;
          case 37: 
            { return DBL_RBRACE;
            }
          case 144: break;
          case 38: 
            { return COLON_EQUALS;
            }
          case 145: break;
          case 39: 
            { return COLON_COLON;
            }
          case 146: break;
          case 40: 
            { return IF;
            }
          case 147: break;
          case 41: 
            { return IS;
            }
          case 148: break;
          case 42: 
            { return BY;
            }
          case 149: break;
          case 43: 
            { return OF;
            }
          case 150: break;
          case 44: 
            { return DO;
            }
          case 151: break;
          case 45: 
            { return PROG_IF;
            }
          case 152: break;
          case 46: 
            { return FOR;
            }
          case 153: break;
          case 47: 
            { return CHAR;
            }
          case 154: break;
          case 48: 
            { return TRIPLE_DOT;
            }
          case 155: break;
          case 49: 
            { return COLON_EQUALS_COLON;
            }
          case 156: break;
          case 50: 
            { return END;
            }
          case 157: break;
          case 51: 
            { return DEFINITION;
            }
          case 158: break;
          case 52: 
            { return VAR;
            }
          case 159: break;
          case 53: 
            { return FROM;
            }
          case 160: break;
          case 54: 
            { return IND_BASE;
            }
          case 161: break;
          case 55: 
            { return PARAM_TYPE;
            }
          case 162: break;
          case 56: 
            { return TRUE;
            }
          case 163: break;
          case 57: 
            { return THEN;
            }
          case 164: break;
          case 58: 
            { return ELSE;
            }
          case 165: break;
          case 59: 
            { return USES;
            }
          case 166: break;
          case 60: 
            { return FAMILY_TYPE;
            }
          case 167: break;
          case 61: 
            { return FALSE;
            }
          case 168: break;
          case 62: 
            { return IND_HYPO;
            }
          case 169: break;
          case 63: 
            { return WHILE;
            }
          case 170: break;
          case 64: 
            { return FAMILY;
            }
          case 171: break;
          case 65: 
            { return ALTERS;
            }
          case 172: break;
          case 66: 
            { return PRECIS;
            }
          case 173: break;
          case 67: 
            { return CLEARS;
            }
          case 174: break;
          case 68: 
            { return RECORD;
            }
          case 175: break;
          case 69: 
            { return NOTICE;
            }
          case 176: break;
          case 70: 
            { return CONCEPT;
            }
          case 177: break;
          case 71: 
            { return ENSURES;
            }
          case 178: break;
          case 72: 
            { return DEFINES;
            }
          case 179: break;
          case 73: 
            { return MODELED;
            }
          case 180: break;
          case 74: 
            { return UPDATES;
            }
          case 181: break;
          case 75: 
            { return THEOREM;
            }
          case 182: break;
          case 76: 
            { return REALIZED;
            }
          case 183: break;
          case 77: 
            { return REPLACES;
            }
          case 184: break;
          case 78: 
            { return RESTORES;
            }
          case 185: break;
          case 79: 
            { return REQUIRES;
            }
          case 186: break;
          case 80: 
            { return ENHANCED;
            }
          case 187: break;
          case 81: 
            { return EXEMPLAR;
            }
          case 188: break;
          case 82: 
            { return CHANGING;
            }
          case 189: break;
          case 83: 
            { return FACILITY;
            }
          case 190: break;
          case 84: 
            { return IMPLICIT;
            }
          case 191: break;
          case 85: 
            { return CART_PROD;
            }
          case 192: break;
          case 86: 
            { return COROLLARY;
            }
          case 193: break;
          case 87: 
            { return CHAINABLE;
            }
          case 194: break;
          case 88: 
            { return PROCEDURE;
            }
          case 195: break;
          case 89: 
            { return OTHERWISE;
            }
          case 196: break;
          case 90: 
            { return EVALUATES;
            }
          case 197: break;
          case 91: 
            { return PRESERVES;
            }
          case 198: break;
          case 92: 
            { return EXTENSION;
            }
          case 199: break;
          case 93: 
            { return INDUCTIVE;
            }
          case 200: break;
          case 94: 
            { return RECURSIVE;
            }
          case 201: break;
          case 95: 
            { return OPERATION;
            }
          case 202: break;
          case 96: 
            { return DECREASING;
            }
          case 203: break;
          case 97: 
            { return EXTERNALLY;
            }
          case 204: break;
          case 98: 
            { return CATEGORICAL;
            }
          case 205: break;
          case 99: 
            { return CONSTRAINTS;
            }
          case 206: break;
          case 100: 
            { return CONVENTIONS;
            }
          case 207: break;
          case 101: 
            { return ENHANCEMENT;
            }
          case 208: break;
          case 102: 
            { return MAINTAINING;
            }
          case 209: break;
          case 103: 
            { return REALIZATION;
            }
          case 210: break;
          case 104: 
            { return RECOGNITION;
            }
          case 211: break;
          case 105: 
            { return WHICH_ENTAILS;
            }
          case 212: break;
          case 106: 
            { return INITIALIZATION;
            }
          case 213: break;
          case 107: 
            { return CORRESPONDENCE;
            }
          case 214: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
